{"version":3,"sources":["model/reference.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAKH,uCAAkD;AAClD,2CAA4D;AAK5D;;GAEG;AACH,sBAA8B,SAAQ,wBAAc;IAIlD,YACI,UAAkB,EAAE,WAAwB,EAAE,OAAa,EAC3D,WAAoB,EAAE,KAAkB,EAAE,QAAoB;QAChE,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC1D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED,OAAO,CAAC,SAAmB;QACzB,oDAAoD;QACpD,gEAAgE;QAChE,sCAAsC;QACtC,MAAM,CAAC,IAAI,SAAS,CAChB,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtE,CAAC;CACF;AAlBD,4CAkBC;AAOD;;GAEG;AACH,eAAuB,SAAQ,iBAAO;IAGpC,YACI,UAAkB,EAAE,WAAwB,EAAE,OAAY,EAC1D,QAAiC;QACnC,KAAK,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QACtC,2BAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;CACF;AAVD,8BAUC","file":"reference.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Annotation} from '../javascript/jsdoc';\n\nimport {Document} from './document';\nimport {Feature, ScannedFeature} from './feature';\nimport {ImmutableArray, unsafeAsMutable} from './immutable';\nimport {Resolvable} from './resolvable';\nimport {SourceRange} from './source-range';\nimport {Warning} from './warning';\n\n/**\n * A reference to another feature by identifier.\n */\nexport class ScannedReference extends ScannedFeature implements Resolvable {\n  readonly identifier: string;\n  readonly sourceRange: SourceRange;\n\n  constructor(\n      identifier: string, sourceRange: SourceRange, astNode?: any,\n      description?: string, jsdoc?: Annotation, warnings?: Warning[]) {\n    super(sourceRange, astNode, description, jsdoc, warnings);\n    this.identifier = identifier;\n  }\n\n  resolve(_document: Document): Reference {\n    // TODO(justinfagnani): include an actual reference?\n    // Would need a way to get a Kind to pass to Document.getById().\n    // Should Kind in getById by optional?\n    return new Reference(\n        this.identifier, this.sourceRange, this.astNode, this.warnings);\n  }\n}\n\ndeclare module './queryable' {\n  interface FeatureKindMap {\n    'reference': Reference;\n  }\n}\n/**\n * A reference to another feature by identifier.\n */\nexport class Reference extends Feature {\n  identifier: string;\n\n  constructor(\n      identifier: string, sourceRange: SourceRange, astNode: any,\n      warnings: ImmutableArray<Warning>) {\n    super(sourceRange, astNode, warnings);\n    unsafeAsMutable(this.kinds).add('reference');\n    this.identifier = identifier;\n  }\n}\n"]}