{"version":3,"sources":["model/document.ts"],"names":[],"mappings":"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","file":"document.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport * as dom5 from 'dom5';\n\nimport {AnalysisContext} from '../core/analysis-context';\nimport {ParsedDocument} from '../parser/document';\n\nimport {Analysis} from './analysis';\nimport {Feature, ScannedFeature} from './feature';\nimport {ImmutableSet, unsafeAsMutable} from './immutable';\nimport {Import} from './import';\nimport {ScannedInlineDocument} from './inline-document';\nimport {DocumentQuery as Query, DocumentQueryWithKind as QueryWithKind, FeatureKind, FeatureKindMap, Queryable} from './queryable';\nimport {isResolvable} from './resolvable';\nimport {SourceRange} from './source-range';\nimport {Warning} from './warning';\n\n/**\n * The metadata for all features and elements defined in one document\n */\nexport class ScannedDocument {\n  document: ParsedDocument<any, any>;\n  features: ScannedFeature[];\n  warnings: Warning[];\n  isInline = false;\n\n  get sourceRange() {\n    return this.document.sourceRange;\n  }\n  get astNode() {\n    return this.document.astNode;\n  }\n\n  constructor(\n      document: ParsedDocument<any, any>, features: ScannedFeature[],\n      warnings: Warning[] = []) {\n    this.document = document;\n    this.features = features;\n    this.warnings = warnings;\n    this.isInline = document.isInline;\n  }\n\n  get url() {\n    return this.document.url;\n  }\n\n  /**\n   * Gets all features in this scanned document and all inline documents it\n   * contains.\n   */\n  getNestedFeatures(): ScannedFeature[] {\n    const result: ScannedFeature[] = [];\n    this._getNestedFeatures(result);\n    return result;\n  }\n\n  private _getNestedFeatures(features: ScannedFeature[]): void {\n    for (const feature of this.features) {\n      // Ad hoc test needed here to avoid a problematic import loop.\n      const maybeInlineDoc = feature as Partial<ScannedInlineDocument>;\n      if (maybeInlineDoc.constructor.name === 'ScannedInlineDocument' &&\n          maybeInlineDoc.scannedDocument) {\n        maybeInlineDoc.scannedDocument._getNestedFeatures(features);\n      } else {\n        features.push(feature);\n      }\n    }\n  }\n}\n\ndeclare module './queryable' {\n  interface FeatureKindMap {\n    'document': Document;\n\n    // Document specializations.\n    'html-document': Document;\n    'js-document': Document;\n    'json-document': Document;\n    'css-document': Document;\n  }\n}\nexport class Document implements Feature, Queryable {\n  readonly kinds: ImmutableSet<string> = new Set(['document']);\n  readonly identifiers: ImmutableSet<string> = new Set();\n\n  /**\n   * AnalysisContext is a private type. Only internal analyzer code should touch\n   * this field.\n   */\n  _analysisContext: AnalysisContext;\n  warnings: Warning[];\n  languageAnalysis?: any;\n\n  private readonly _localFeatures = new Set<Feature>();\n  private readonly _scannedDocument: ScannedDocument;\n\n\n  /**\n   * To handle recursive dependency graphs we must track whether we've started\n   * resolving this Document so that we can reliably early exit even if one\n   * of our dependencies tries to resolve this document.\n   */\n  private _begunResolving = false;\n\n  /**\n   * True after this document and all of its children are finished resolving.\n   */\n  private _doneResolving = false;\n\n  constructor(\n      base: ScannedDocument, analyzer: AnalysisContext,\n      languageAnalysis?: any) {\n    if (base == null) {\n      throw new Error('base is null');\n    }\n    if (analyzer == null) {\n      throw new Error('analyzer is null');\n    }\n    this._scannedDocument = base;\n    this._analysisContext = analyzer;\n    this.languageAnalysis = languageAnalysis;\n\n    if (!base.isInline) {\n      unsafeAsMutable(this.identifiers).add(this.url);\n    }\n    unsafeAsMutable(this.kinds).add(`${this.parsedDocument.type}-document`);\n    this.warnings = Array.from(base.warnings);\n  }\n\n  get url(): string {\n    return this._scannedDocument.url;\n  }\n\n  get isInline(): boolean {\n    return this._scannedDocument.isInline;\n  }\n\n  get sourceRange(): SourceRange|undefined {\n    return this._scannedDocument.sourceRange;\n  }\n\n  get astNode(): dom5.Node|undefined {\n    return this._scannedDocument.astNode;\n  }\n\n  get parsedDocument(): ParsedDocument<any, any> {\n    return this._scannedDocument.document;\n  }\n\n  get resolved(): boolean {\n    return this._doneResolving;\n  }\n\n  get type(): string {\n    return this.parsedDocument.type;\n  }\n\n  /**\n   * Resolves all features of this document, so that they have references to all\n   * their dependencies.\n   *\n   * This method can only be called once\n   */\n  // TODO(justinfagnani): move to ScannedDocument\n  resolve() {\n    if (this._doneResolving) {\n      throw new Error('resolve can only be called once');\n    }\n    if (this._begunResolving) {\n      return;\n    }\n    this._begunResolving = true;\n    this._addFeature(this);\n    for (const scannedFeature of this._scannedDocument.features) {\n      if (isResolvable(scannedFeature)) {\n        const feature = scannedFeature.resolve(this);\n        if (feature) {\n          this._addFeature(feature);\n        }\n      }\n    }\n    this._doneResolving = true;\n  }\n\n  /**\n   * Adds and indexes a feature to this documentled before resolve().\n   */\n  _addFeature(feature: Feature) {\n    if (this._doneResolving) {\n      throw new Error('_addFeature can not be called after _resolve()');\n    }\n    this._indexFeature(feature);\n    this._localFeatures.add(feature);\n  }\n\n  /**\n   * Get features on the document.\n   *\n   * Be default it includes only features on the document, but you can specify\n   * whether to include features that are reachable by imports, features from\n   * outside the current package, etc. See the documentation for Query for more\n   * details.\n   *\n   * You can also narrow by feature kind and identifier.\n   */\n  getFeatures<K extends FeatureKind>(query: QueryWithKind<K>):\n      Set<FeatureKindMap[K]>;\n  getFeatures(query?: Query): Set<Feature>;\n  getFeatures(query: Query = {}): Set<Feature> {\n    if (query.id && query.kind) {\n      return this._getById(query.kind, query.id, query);\n    } else if (query.kind) {\n      return this._getByKind(query.kind, query);\n    }\n    const features = new Set();\n    this._listFeatures(features, new Set(), query);\n    const queryId = query.id;\n    if (queryId) {\n      const filteredFeatures =\n          Array.from(features).filter((f) => f.identifiers.has(queryId));\n      return new Set(filteredFeatures);\n    }\n    return features;\n  }\n\n  private _getByKind<K extends FeatureKind>(kind: K, query?: Query):\n      Set<FeatureKindMap[K]>;\n  private _getByKind(kind: string, query?: Query): Set<Feature>;\n  private _getByKind(kind: string, query: Query = {}): Set<Feature> {\n    if (this._featuresByKind && this._isCachable(query)) {\n      // We have a fast index! Use that.\n      const features = this._featuresByKind.get(kind) || new Set();\n      if (!query.externalPackages) {\n        return this._filterOutExternal(features);\n      }\n      return features;\n    } else if (this._doneResolving && this._isCachable(query)) {\n      // We're done discovering features in this document and its children so\n      // we can safely build up the indexes.\n      this._buildIndexes();\n      return this._getByKind(kind, query);\n    }\n    return this._getSlowlyByKind(kind, query);\n  }\n\n  private _getById<K extends FeatureKind>(\n      kind: K, identifier: string, query?: Query): Set<FeatureKindMap[K]>;\n  private _getById(kind: string, identifier: string, query?: Query):\n      Set<Feature>;\n  private _getById(kind: string, identifier: string, query: Query = {}):\n      Set<Feature> {\n    if (this._featuresByKindAndId && this._isCachable(query)) {\n      // We have a fast index! Use that.\n      const idMap = this._featuresByKindAndId.get(kind);\n      const features = (idMap && idMap.get(identifier)) || new Set();\n      if (!query.externalPackages) {\n        return this._filterOutExternal(features);\n      }\n      return features;\n    } else if (this._doneResolving && this._isCachable(query)) {\n      // We're done discovering features in this document and its children so\n      // we can safely build up the indexes.\n      this._buildIndexes();\n      return this._getById(kind, identifier, query);\n    }\n    const result = new Set<Feature>();\n    for (const featureOfKind of this._getByKind(kind, query)) {\n      if (featureOfKind.identifiers.has(identifier)) {\n        result.add(featureOfKind);\n      }\n    }\n    return result;\n  }\n\n  private _isCachable(query: Query = {}): boolean {\n    return !!query.imported && !query.noLazyImports;\n  }\n\n  private _getSlowlyByKind(kind: string, query: Query): Set<Feature> {\n    const allFeatures = new Set<Feature>();\n    this._listFeatures(allFeatures, new Set(), query);\n\n    const result = new Set<Feature>();\n    for (const feature of allFeatures) {\n      if (feature.kinds.has(kind)) {\n        result.add(feature);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Walks the graph of documents, starting from `this`, finding features which\n   * match the given query and adding them to the `result` set. Uses `visited`\n   * to deal with cycles.\n   *\n   * This method is O(numFeatures), though it does not walk documents that are\n   * not relevant to the query (e.g. based on whether the query follows imports,\n   * or excludes lazy imports)\n   */\n  private _listFeatures(\n      result: Set<Feature>, visited: Set<Document>, query: Query) {\n    if (visited.has(this)) {\n      return;\n    }\n    visited.add(this);\n    for (const feature of this._localFeatures) {\n      result.add(feature);\n      if (feature.kinds.has('document')) {\n        (feature as Document)._listFeatures(result, visited, query);\n      }\n      if (feature.kinds.has('import') && query.imported) {\n        const imprt = feature as Import;\n        const isPackageInternal =\n            imprt.document && !Analysis.isExternal(imprt.document.url);\n        const externalityOk = query.externalPackages || isPackageInternal;\n        const lazinessOk = !query.noLazyImports || !imprt.lazy;\n        if (externalityOk && lazinessOk) {\n          imprt.document._listFeatures(result, visited, query);\n        }\n      }\n    }\n  }\n\n  private _filterOutExternal(features: Set<Feature>): Set<Feature> {\n    const result = new Set();\n    for (const feature of features) {\n      if (feature.sourceRange &&\n          Analysis.isExternal(feature.sourceRange.file)) {\n        continue;\n      }\n      result.add(feature);\n    }\n    return result;\n  }\n\n  /**\n   * Get warnings for the document and all matched features.\n   */\n  getWarnings(query: Query = {}): Warning[] {\n    const warnings: Set<Warning> = new Set(this.warnings);\n    for (const feature of this.getFeatures(query)) {\n      for (const warning of feature.warnings) {\n        warnings.add(warning);\n      }\n    }\n    return Array.from(warnings);\n  }\n\n  toString(): string {\n    return this._toString(new Set()).join('\\n');\n  }\n\n  private _toString(documentsWalked: Set<Document>) {\n    let result =\n        [`<Document type=${this.parsedDocument.type} url=${this.url}>\\n`];\n    if (documentsWalked.has(this)) {\n      return result;\n    }\n    documentsWalked.add(this);\n\n    for (const localFeature of this._localFeatures) {\n      if (localFeature instanceof Document) {\n        result = result.concat(\n            localFeature._toString(documentsWalked).map((line) => `  ${line}`));\n      } else {\n        let subResult = localFeature.toString();\n        if (subResult === '[object Object]') {\n          subResult = `<${\n          localFeature.constructor.name\n          } kinds=\"${\n          Array.from(localFeature.kinds).join(', ')\n          }\" ids=\"${\n          Array.from(localFeature.identifiers).join(',')\n          }\">}`;\n        }\n        result.push(`  ${subResult}`);\n      }\n    }\n\n    return result;\n  }\n\n  stringify(): string {\n    const inlineDocuments =\n        (Array.from(this._localFeatures)\n             .filter((f) => f instanceof Document && f.isInline) as Document[])\n            .map((d) => d.parsedDocument);\n    return this.parsedDocument.stringify({inlineDocuments: inlineDocuments});\n  }\n\n  private _indexFeature(feature: Feature) {\n    if (!this._featuresByKind || !this._featuresByKindAndId) {\n      return;\n    }\n    for (const kind of feature.kinds) {\n      const kindSet = this._featuresByKind.get(kind) || new Set<Feature>();\n      kindSet.add(feature);\n      this._featuresByKind.set(kind, kindSet);\n      for (const id of feature.identifiers) {\n        const identifiersMap = this._featuresByKindAndId.get(kind) ||\n            new Map<string, Set<Feature>>();\n        this._featuresByKindAndId.set(kind, identifiersMap);\n        const idSet = identifiersMap.get(id) || new Set<Feature>();\n        identifiersMap.set(id, idSet);\n        idSet.add(feature);\n      }\n    }\n  }\n\n  private _featuresByKind: Map<string, Set<Feature>>|null = null;\n  private _featuresByKindAndId: Map<string, Map<string, Set<Feature>>>|null =\n      null;\n  private _buildIndexes() {\n    if (this._featuresByKind) {\n      throw new Error(\n          'Tried to build indexes multiple times. This should never happen.');\n    }\n    if (!this._doneResolving) {\n      throw new Error(\n          `Tried to build indexes before finished resolving. ` +\n          `Need to wait until afterwards or the indexes would be incomplete.`);\n    }\n    this._featuresByKind = new Map<string, Set<Feature>>();\n    this._featuresByKindAndId = new Map<string, Map<string, Set<Feature>>>();\n    for (const feature of this.getFeatures(\n             {imported: true, externalPackages: true})) {\n      this._indexFeature(feature);\n    }\n  }\n}\n"]}