{"version":3,"sources":["json/json-document.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAGH,iDAA2D;AAQ3D,wBAAgC,SAAQ,yBAA6B;IAGnE,YAAY,IAAmB;QAC7B,KAAK,CAAC,IAAI,CAAC,CAAC;QAHd,SAAI,GAAG,MAAM,CAAC;IAId,CAAC;IAED,KAAK,CAAC,QAAmB;QACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAClC,CAAC;IAEO,MAAM,CAAC,IAAU,EAAE,QAAmB;QAC5C,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,QAAQ,CAAC,CAAC,CAAC;YAC/B,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC;QAAA,CAAC;QACF,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxB,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YACrD,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACxC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;IACH,CAAC;IAED,WAAW,CAAC,QAA8B;QACxC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC;IAClC,CAAC;IAES,mBAAmB,CAAC,KAAW;QACvC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACtC,CAAC;IAED,SAAS;QACP,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC;CACF;AArCD,gDAqCC","file":"json-document.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {SourceRange} from '../model/model';\nimport {Options, ParsedDocument} from '../parser/document';\n\nexport type Json = JsonObject | JsonArray | number | string | boolean | null;\nexport interface JsonObject { [key: string]: Json; }\nexport interface JsonArray extends Array<Json> {}\n\nexport interface Visitor { visit(node: Json): void; }\n\nexport class ParsedJsonDocument extends ParsedDocument<Json, Visitor> {\n  type = 'json';\n\n  constructor(from: Options<Json>) {\n    super(from);\n  }\n\n  visit(visitors: Visitor[]) {\n    this._visit(this.ast, visitors);\n  }\n\n  private _visit(node: Json, visitors: Visitor[]) {\n    for (const visitor of visitors) {\n      visitor.visit(node);\n    };\n    if (Array.isArray(node)) {\n      for (const value of node) {\n        this._visit(value, visitors);\n      }\n    } else if (typeof node === 'object' && node !== null) {\n      for (const value of Object.values(node)) {\n        this._visit(value, visitors);\n      }\n    }\n  }\n\n  forEachNode(callback: (node: Json) => void) {\n    this.visit([{visit: callback}]);\n  }\n\n  protected _sourceRangeForNode(_node: Json): SourceRange {\n    throw new Error('Not Implemented.');\n  }\n\n  stringify() {\n    return JSON.stringify(this.ast, null, 2);\n  }\n}\n"]}