{"version":3,"sources":["warning/warning-printer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA+B;AAW/B,MAAM,qBAAqB,GAAG;IAC5B,SAAS,EAAE,MAAgB;IAC3B,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;IAIE,YAAoB,UAAiC,EAAE,OAAiB;QAApD,eAAU,GAAV,UAAU,CAAuB;QACnD,IAAI,CAAC,QAAQ,qBAAO,qBAAqB,EAAK,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,EAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAC,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACG,aAAa,CAAC,QAA2B;;YAC7C,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,QAAQ,CAAC,CAAC,CAAC;gBAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC;oBACvC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAChC,CAAC;gBACD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACzD,CAAC;QACH,CAAC;KAAA;CACF;AApBD,wCAoBC","file":"warning-printer.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as chalk from 'chalk';\n\nimport {Warning} from '../model/model';\n\nexport type Verbosity = 'one-line' | 'full';\n\nexport interface Options {\n  verbosity?: Verbosity;\n  color?: boolean;\n}\n\nconst defaultPrinterOptions = {\n  verbosity: 'full' as 'full',\n  color: true\n};\n\nexport class WarningPrinter {\n  _chalk: chalk.Chalk;\n  private _options: Options;\n\n  constructor(private _outStream: NodeJS.WritableStream, options?: Options) {\n    this._options = {...defaultPrinterOptions, ...options};\n    this._chalk = new chalk.constructor({enabled: !!this._options.color});\n  }\n\n  /**\n   * Convenience method around `printWarning`.\n   */\n  async printWarnings(warnings: Iterable<Warning>) {\n    for (const warning of warnings) {\n      if (this._options.verbosity === 'full') {\n        this._outStream.write('\\n\\n');\n      }\n      this._outStream.write(warning.toString(this._options));\n    }\n  }\n}\n"]}