{"version":3,"sources":["javascript/function.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAQH;IAYE,YACI,IAAY,EAAE,WAAmB,EAAE,OAAe,EAAE,OAAgB,EACpE,OAAoB,EAAE,KAAsB,EAAE,WAAwB,EACtE,MAAwC,EACxC,UAA0C;QAC5C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,OAAO,CAAC,SAAmB;QACzB,MAAM,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;CACF;AAhCD,0CAgCC;AAOD;IAaE,YAAY,eAAgC;QAC1C,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;QAC/C,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;QAC/C,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC;IACzC,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,gBAAgB,IAAI,CAAC,IAAI,GAAG,CAAC;IACtC,CAAC;CACF;AA9BD,4BA8BC","file":"function.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\n\nimport {Document, Feature, Privacy, Resolvable, SourceRange, Warning} from '../model/model';\n\nimport {Annotation as JsDocAnnotation} from './jsdoc';\n\nexport class ScannedFunction implements Resolvable {\n  name: string;\n  description?: string;\n  summary?: string;\n  jsdoc?: JsDocAnnotation;\n  sourceRange: SourceRange;\n  astNode: estree.Node;\n  warnings: Warning[];\n  params?: {name: string, type?: string}[];\n  return?: {type?: string, desc: string};\n  privacy: Privacy;\n\n  constructor(\n      name: string, description: string, summary: string, privacy: Privacy,\n      astNode: estree.Node, jsdoc: JsDocAnnotation, sourceRange: SourceRange,\n      params?: {name: string, type?: string}[],\n      returnData?: {type?: string, desc: string}, ) {\n    this.name = name;\n    this.description = description;\n    this.summary = summary;\n    this.jsdoc = jsdoc;\n    this.sourceRange = sourceRange;\n    this.astNode = astNode;\n    this.warnings = [];\n    this.params = params;\n    this.return = returnData;\n    this.privacy = privacy;\n  }\n\n  resolve(_document: Document) {\n    return new Function(this);\n  }\n}\n\ndeclare module '../model/queryable' {\n  interface FeatureKindMap {\n    'function': Function;\n  }\n}\nexport class Function implements Feature {\n  name: string;\n  description?: string;\n  summary?: string;\n  privacy: Privacy;\n  kinds: Set<string>;\n  identifiers: Set<string>;\n  sourceRange: SourceRange;\n  astNode: any;\n  warnings: Warning[];\n  params?: {name: string, type?: string}[];\n  return?: {type?: string, desc: string};\n\n  constructor(scannedFunction: ScannedFunction) {\n    this.name = scannedFunction.name;\n    this.description = scannedFunction.description;\n    this.summary = scannedFunction.summary;\n    this.kinds = new Set(['function']);\n    this.identifiers = new Set([this.name]);\n    this.sourceRange = scannedFunction.sourceRange;\n    this.astNode = scannedFunction.astNode;\n    this.warnings = Array.from(scannedFunction.warnings);\n    this.params = scannedFunction.params;\n    this.return = scannedFunction.return;\n    this.privacy = scannedFunction.privacy;\n  }\n\n  toString() {\n    return `<Function id=${this.name}>`;\n  }\n}\n"]}