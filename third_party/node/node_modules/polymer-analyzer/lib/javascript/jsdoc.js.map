{"version":3,"sources":["javascript/jsdoc.ts"],"names":[],"mappings":"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","file":"jsdoc.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as doctrine from 'doctrine';\nimport {Annotation, Tag} from 'doctrine';\nimport * as estree from 'estree';\n\nimport {Privacy} from '../model/model';\nimport {ScannedReference, Severity, Warning} from '../model/model';\n\nimport {JavaScriptDocument} from './javascript-document';\n\nexport {Annotation, Tag} from 'doctrine';\n\n\n/**\n * Given a JSDoc string (minus opening/closing comment delimiters), extract its\n * description and tags.\n */\nexport function parseJsdoc(docs: string): doctrine.Annotation {\n  docs = removeLeadingAsterisks(docs);\n  const d = doctrine.parse(docs, {\n    unwrap: false,\n    // lineNumbers: true,\n    preserveWhitespace: true,\n  });\n  // Strip any leading and trailing newline characters in the\n  // description of multiline comments for readibility.\n  // TODO(rictic): figure out if we can trim() here or not. Something something\n  //     markdown?\n  const description = d.description && d.description.replace(/^\\n+|\\n+$/g, '');\n  return {description, tags: parseCustomTags(d.tags)};\n}\n\n// Tags with a name: @title name description\nconst tagsWithNames = new Set([\n  'appliesMixin',\n  'demo',\n  'hero',\n  'mixinFunction',\n  'polymerBehavior',\n  'pseudoElement'\n]);\nconst firstWordAndRest = /^\\s*(\\S*)\\s*(.*)$/;\n\nfunction parseCustomTags(tags: Tag[]): Tag[] {\n  return tags.map((tag): Tag => {\n    if (tag.description != null && tagsWithNames.has(tag.title)) {\n      const match = firstWordAndRest.exec(tag.description);\n      if (match != null) {\n        const name = match[1];\n        const description = match[2];\n        return {\n          ...tag,\n          name,\n          description,\n        };\n      }\n    }\n    return tag;\n  });\n}\n\n/**\n * removes leading *, and any space before it\n */\nexport function removeLeadingAsterisks(description: string): string {\n  return description.split('\\n')\n      .map(function(line) {\n        // remove leading '\\s*' from each line\n        const match = line.match(/^[\\s]*\\*\\s?(.*)$/);\n        return match ? match[1] : line;\n      })\n      .join('\\n');\n}\n\nexport function hasTag(jsdoc: Annotation|undefined, title: string): boolean {\n  return getTag(jsdoc, title) !== undefined;\n}\n\n/**\n * Finds the first JSDoc tag matching `title`.\n */\nexport function getTag(jsdoc: Annotation|undefined, title: string): Tag|\n    undefined {\n  return jsdoc && jsdoc.tags && jsdoc.tags.find((t) => t.title === title);\n}\n\nexport function unindent(text: string): string {\n  if (!text)\n    return text;\n  const lines = text.replace(/\\t/g, '  ').split('\\n');\n  const indent = lines.reduce<number>(function(prev, line) {\n    if (/^\\s*$/.test(line))\n      return prev;  // Completely ignore blank lines.\n\n    const lineIndent = line.match(/^(\\s*)/)![0].length;\n    if (prev === null)\n      return lineIndent;\n    return lineIndent < prev ? lineIndent : prev;\n  }, 0);\n\n  return lines\n      .map(function(l) {\n        return l.substr(indent);\n      })\n      .join('\\n');\n}\n\nexport function isAnnotationEmpty(docs: Annotation|undefined) {\n  return docs === undefined ||\n      docs.tags.length === 0 && docs.description.trim() === '';\n}\n\nconst privacyTags: Set<string> = new Set(['public', 'private', 'protected']);\n\nexport function getPrivacy(jsdoc: Annotation|undefined): Privacy|undefined {\n  return jsdoc && jsdoc.tags &&\n      jsdoc.tags.filter((t) => privacyTags.has(t.title))\n          .map((t) => t.title as Privacy)[0];\n}\n\n/**\n * Returns the mixin applications, in the form of ScannedReferences, for the\n * jsdocs of class.\n *\n * The references are returned in presumed order of application - from furthest\n * up the prototype chain to closest to the subclass.\n */\nexport function getMixinApplications(\n    document: JavaScriptDocument,\n    node: estree.Node,\n    docs: Annotation,\n    warnings: Warning[]): ScannedReference[] {\n  // TODO(justinfagnani): remove @mixes support\n  const appliesMixinAnnotations = docs.tags!.filter(\n      (tag) => tag.title === 'appliesMixin' || tag.title === 'mixes');\n  return appliesMixinAnnotations\n      .map((annotation) => {\n        const mixinId = annotation.name;\n        // TODO(justinfagnani): we need source ranges for jsdoc annotations\n        const sourceRange = document.sourceRangeForNode(node)!;\n        if (mixinId === undefined) {\n          warnings.push(new Warning({\n            code: 'class-mixes-annotation-no-id',\n            message:\n                '@appliesMixin annotation with no identifier. Usage `@appliesMixin MixinName`',\n            severity: Severity.WARNING, sourceRange,\n            parsedDocument: document\n          }));\n          return;\n        }\n        return new ScannedReference(mixinId, sourceRange);\n      })\n      .filter((m) => m !== undefined) as ScannedReference[];\n}\n\nexport function extractDemos(jsdoc: Annotation|undefined):\n    Array<{desc: string | undefined, path: string}> {\n  if (!jsdoc || !jsdoc.tags) {\n    return [];\n  }\n  const demos: Array<{desc: string | undefined, path: string}> = [];\n  const demoUrls = new Set<string>();\n  for (const tag of jsdoc.tags.filter(\n           (tag) => tag.title === 'demo' && tag.name)) {\n    const demoUrl = tag.name!;\n    if (demoUrls.has(demoUrl)) {\n      continue;\n    }\n    demoUrls.add(demoUrl);\n    demos.push({\n      desc: tag.description || undefined,\n      path: demoUrl,\n    });\n  }\n  return demos;\n}\n\nexport function join(...jsdocs: Annotation[]): Annotation {\n  return {\n    description:\n        jsdocs.map((jsdoc) => jsdoc.description || '').join('\\n\\n').trim(),\n    tags: jsdocs.map((jsdoc) => jsdoc.tags)\n              .reduce((acc, tags) => acc.concat(tags)),\n  };\n}\n"]}