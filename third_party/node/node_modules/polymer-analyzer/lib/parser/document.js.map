{"version":3,"sources":["parser/document.ts"],"names":[],"mappings":"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","file":"document.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {correctSourceRange, LocationOffset, SourcePosition, SourceRange, uncorrectSourceRange} from '../model/source-range';\n\n/**\n * A parsed Document.\n *\n * @template AstNode The AST type of the document.\n * @template Visitor The type of the visitors that can walk the document.\n */\nexport abstract class ParsedDocument<AstNode, Visitor> {\n  abstract type: string;\n  url: string;\n  baseUrl: string;\n  contents: string;\n  ast: AstNode;\n  isInline: boolean;\n\n  /**\n   * If not null, this is an inline document, and astNode is the AST Node of\n   * this document inside of the parent. (e.g. the <style> or <script> tag)\n   */\n  astNode: any;\n\n  sourceRange: SourceRange;\n\n  private readonly _locationOffset: LocationOffset|undefined;\n\n  /**\n   * The 0-based offsets into `contents` of all newline characters.\n   *\n   * Useful for converting between string offsets and SourcePositions.\n   */\n  readonly newlineIndexes: number[] = [];\n\n  constructor(from: Options<AstNode>) {\n    this.url = from.url;\n    this.baseUrl = from.baseUrl || this.url;\n    this.contents = from.contents;\n    this.ast = from.ast;\n    this._locationOffset = from.locationOffset;\n    this.astNode = from.astNode;\n    this.isInline = from.isInline;\n\n    let lastSeenLine = -1;\n    while (true) {\n      lastSeenLine = from.contents.indexOf('\\n', lastSeenLine + 1);\n      if (lastSeenLine === -1) {\n        break;\n      }\n      this.newlineIndexes.push(lastSeenLine);\n    }\n    this.sourceRange = this.offsetsToSourceRange(0, this.contents.length);\n  }\n\n  /**\n   * Runs a set of document-type specific visitors against the document.\n   */\n  abstract visit(visitors: Visitor[]): void;\n\n  /**\n   * Calls `callback` for each AST node in the document in document order.\n   *\n   * Implementations _must_ call the callback with every node, and must do so\n   * in document order.\n   */\n  abstract forEachNode(callback: (node: AstNode) => void): void;\n\n  sourceRangeForNode(node: AstNode): SourceRange|undefined {\n    const baseSource = this._sourceRangeForNode(node);\n    return this.relativeToAbsoluteSourceRange(baseSource);\n  };\n\n  protected abstract _sourceRangeForNode(node: AstNode): SourceRange|undefined;\n\n  /**\n   * Convert `this.ast` back into a string document.\n   */\n  abstract stringify(options: StringifyOptions): string;\n\n  offsetToSourcePosition(offset: number): SourcePosition {\n    const linesLess = binarySearch(offset, this.newlineIndexes);\n    let colOffset = this.newlineIndexes[linesLess - 1];\n    if (colOffset == null) {\n      colOffset = 0;\n    } else {\n      colOffset = colOffset + 1;\n    }\n    return {line: linesLess, column: offset - colOffset};\n  }\n\n  offsetsToSourceRange(start: number, end: number): SourceRange {\n    const sourceRange = {\n      file: this.url,\n      start: this.offsetToSourcePosition(start),\n      end: this.offsetToSourcePosition(end)\n    };\n    return correctSourceRange(sourceRange, this._locationOffset)!;\n  }\n\n  sourcePositionToOffset(position: SourcePosition): number {\n    const line = Math.max(0, position.line);\n    let lineOffset;\n    if (line === 0) {\n      lineOffset = -1;\n    } else if (line > this.newlineIndexes.length) {\n      lineOffset = this.contents.length - 1;\n    } else {\n      lineOffset = this.newlineIndexes[line - 1];\n    }\n    const result = position.column + lineOffset + 1;\n    // Clamp within bounds.\n    return Math.min(Math.max(0, result), this.contents.length);\n  }\n\n  relativeToAbsoluteSourceRange(sourceRange: SourceRange): SourceRange;\n  relativeToAbsoluteSourceRange(sourceRange: undefined): undefined;\n  relativeToAbsoluteSourceRange(sourceRange: SourceRange|undefined): SourceRange\n      |undefined;\n  relativeToAbsoluteSourceRange(sourceRange: SourceRange|undefined): SourceRange\n      |undefined {\n    return correctSourceRange(sourceRange, this._locationOffset);\n  }\n\n\n  absoluteToRelativeSourceRange(sourceRange: SourceRange): SourceRange;\n  absoluteToRelativeSourceRange(sourceRange: undefined): undefined;\n  absoluteToRelativeSourceRange(sourceRange: SourceRange|undefined): SourceRange\n      |undefined;\n  absoluteToRelativeSourceRange(sourceRange: SourceRange|undefined): SourceRange\n      |undefined {\n    return uncorrectSourceRange(sourceRange, this._locationOffset);\n  }\n\n  sourceRangeToOffsets(range: SourceRange): [number, number] {\n    return [\n      this.sourcePositionToOffset(range.start),\n      this.sourcePositionToOffset(range.end)\n    ];\n  }\n\n  toString() {\n    if (this.isInline) {\n      return `Inline ${this.constructor.name} on line ` +\n          `${this.sourceRange.start.line} of ${this.url}`;\n    }\n    return `${this.constructor.name} at ${this.url}`;\n  }\n}\n\nexport interface Options<A> {\n  url: string;\n  baseUrl?: string;\n  contents: string;\n  ast: A;\n  locationOffset: LocationOffset|undefined;\n  astNode: any|null;\n  isInline: boolean;\n}\n\nexport interface StringifyOptions {\n  /** The desired level of indentation of to stringify at. */\n  indent?: number;\n\n  /**\n   * Parsed (and possibly modified) documents that exist inside this document\n   * whose stringified contents should be used instead of what is in `ast`.\n   */\n  inlineDocuments?: ParsedDocument<any, any>[];\n}\n\n/**\n * The variant of binary search that returns the number of elements in the\n * array that is strictly less than the target.\n */\nfunction binarySearch(target: number, arr: number[]) {\n  let lower = 0;\n  let upper = arr.length - 1;\n  while (true) {\n    if (lower > upper) {\n      return lower;\n    }\n    const m = Math.floor((upper + lower) / 2);\n    if (target === arr[m]) {\n      return m;\n    }\n    if (target > arr[m]) {\n      lower = m + 1;\n    } else {\n      upper = m - 1;\n    }\n  }\n}\n"]}