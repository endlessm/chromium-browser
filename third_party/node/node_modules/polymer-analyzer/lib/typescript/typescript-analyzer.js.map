{"version":3,"sources":["typescript/typescript-analyzer.ts"],"names":[],"mappings":"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","file":"typescript-analyzer.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {AnalysisContext} from '../core/analysis-context';\nimport {LanguageAnalyzer} from '../core/language-analyzer';\nimport {ParsedTypeScriptDocument} from './typescript-document';\n\nconst _compilerOptions: ts.CompilerOptions = {\n  allowJs: true,\n  emit: false,\n  lib: ['ES2017', 'DOM'],\n};\n\nexport class TypeScriptAnalyzer implements LanguageAnalyzer<ts.Program> {\n  private _context: AnalysisContext;\n\n  constructor(analysisContext: AnalysisContext) {\n    this._context = analysisContext;\n  }\n\n  analyze(url: string): ts.Program {\n    const host = new AnalyzerCompilerHost(this._context);\n    return ts.createProgram([url], _compilerOptions, host);\n  }\n}\n\n// This is mainly for telling the compiler the directory that the\n// lib files are in.\nconst defaultLib = '/$lib/lib.es2017.d.ts';\n\nconst tsLibPath = path.dirname(require.resolve('typescript'));\n\nfunction isLibraryPath(filename: string) {\n  return filename.startsWith('/$lib/');\n}\n\nconst libraryCache = new Map<string, string|undefined>();\nfunction getLibrarySource(filePath: string) {\n  if (libraryCache.has(filePath)) {\n    return libraryCache.get(filePath);\n  }\n  let libFileName = filePath.substring('/$lib/'.length).toLowerCase();\n  if (!libFileName.startsWith('lib.')) {\n    libFileName = `lib.${libFileName}`;\n  }\n  const libPath = path.resolve(tsLibPath, libFileName);\n  let source;\n  try {\n    source = fs.readFileSync(libPath, {encoding: 'utf-8'});\n  } catch (e) {\n    // not found\n  }\n  libraryCache.set(filePath, source);\n  return source;\n}\n\n/**\n * A TypeScript CompilerHost that reads files from an AnalysisContext.\n */\nclass AnalyzerCompilerHost implements ts.CompilerHost {\n  context: AnalysisContext;\n\n  constructor(context: AnalysisContext) {\n    this.context = context;\n  }\n\n  getSourceFile(\n      fileName: string, languageVersion: ts.ScriptTarget,\n      onError?: (message: string) => void): ts.SourceFile {\n    if (isLibraryPath(fileName)) {\n      const libSource = getLibrarySource(fileName);\n      if (libSource != null) {\n        return ts.createSourceFile(fileName, libSource, languageVersion);\n      }\n      // We don't call onError for library paths because the compiler asks for\n      // many paths speculatively. Returning null is sufficient.\n    } else {\n      // This method will be called during analysis, but after all files\n      // in the dependency graph have been loaded, so it can call a synchronous\n      // method to get the source of a file.\n      const scannedDocument = this.context._getScannedDocument(fileName);\n      if (scannedDocument != null) {\n        const typescriptDocument =\n            scannedDocument.document as ParsedTypeScriptDocument;\n        return typescriptDocument.ast as ts.SourceFile;\n      }\n      if (onError) {\n        onError('not found');\n      }\n    }\n    return null as any as ts.SourceFile;\n  }\n\n  getDefaultLibFileName() {\n    return defaultLib;\n  }\n\n  get writeFile(): ts.WriteFileCallback {\n    return (_fileName: string,\n            _data: string,\n            _writeByteOrderMark: boolean,\n            _onError?: (message: string) => void,\n            _sourceFiles?: ts.SourceFile[]): void => {\n      throw new Error('unsupported operation');\n    };\n  }\n\n  getCurrentDirectory() {\n    // Seems to work best\n    return '';\n  }\n\n  getDirectories(_path: string): string[] {\n    // Seems to work best\n    return [''];\n  }\n\n  getCanonicalFileName(fileName: string) {\n    return this.context.resolveUrl(fileName);\n  }\n\n  getNewLine() {\n    return ts.sys.newLine;\n  }\n\n  useCaseSensitiveFileNames() {\n    return true;\n  }\n\n  fileExists(fileName: string) {\n    const resolvedUrl = this.context.resolveUrl(fileName);\n    return isLibraryPath(resolvedUrl) &&\n        getLibrarySource(resolvedUrl) != null ||\n        this.context._getScannedDocument(resolvedUrl) != null;\n  }\n\n  readFile(fileName: string): string {\n    const resolvedUrl = this.context.resolveUrl(fileName);\n    if (isLibraryPath(resolvedUrl)) {\n      const libPath = require.resolve(`typescript/lib/${fileName}`);\n      return fs.readFileSync(libPath, {encoding: 'utf-8'});\n    }\n    const document = this.context._getScannedDocument(resolvedUrl);\n    return (document) ? document.document.contents : null as any as string;\n  }\n\n  resolveModuleNames(moduleNames: string[], containingFile: string):\n      ts.ResolvedModule[] {\n    return moduleNames.map((moduleName) => {\n      // We only support path resolution, not node resolution\n      if (!(moduleName.startsWith('./') || moduleName.startsWith('../') ||\n            moduleName.startsWith('/'))) {\n        return {resolvedFileName: null as any as string};\n      }\n      // since we have a path, we can simply resolve it\n      const fileName = path.resolve(path.dirname(containingFile), moduleName);\n      const resolvedFileName = this.context.resolveUrl(fileName);\n      return {resolvedFileName};\n    });\n  }\n}\n"]}