{"version":3,"sources":["typescript/typescript-visitor.ts"],"names":[],"mappings":"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","file":"typescript-visitor.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as ts from 'typescript';\n\nexport abstract class Visitor {\n  visitNode(node: ts.Node) {\n    switch (node.kind) {\n      case ts.SyntaxKind.AnyKeyword:\n        this.visitAnyKeyword(node);\n        break;\n      case ts.SyntaxKind.ArrayBindingPattern:\n        this.visitBindingPattern(<ts.BindingPattern>node);\n        break;\n      case ts.SyntaxKind.ArrayLiteralExpression:\n        this.visitArrayLiteralExpression(<ts.ArrayLiteralExpression>node);\n        break;\n      case ts.SyntaxKind.ArrayType:\n        this.visitArrayType(<ts.ArrayTypeNode>node);\n        break;\n      case ts.SyntaxKind.ArrowFunction:\n        this.visitArrowFunction(<ts.FunctionLikeDeclaration>node);\n        break;\n      case ts.SyntaxKind.BinaryExpression:\n        this.visitBinaryExpression(<ts.BinaryExpression>node);\n        break;\n      case ts.SyntaxKind.BindingElement:\n        this.visitBindingElement(<ts.BindingElement>node);\n        break;\n      case ts.SyntaxKind.Block:\n        this.visitBlock(<ts.Block>node);\n        break;\n      case ts.SyntaxKind.BreakStatement:\n        this.visitBreakStatement(<ts.BreakOrContinueStatement>node);\n        break;\n      case ts.SyntaxKind.CallExpression:\n        this.visitCallExpression(<ts.CallExpression>node);\n        break;\n      case ts.SyntaxKind.CallSignature:\n        this.visitCallSignature(<ts.SignatureDeclaration>node);\n        break;\n      case ts.SyntaxKind.CaseClause:\n        this.visitCaseClause(<ts.CaseClause>node);\n        break;\n      case ts.SyntaxKind.ClassDeclaration:\n        this.visitClassDeclaration(<ts.ClassDeclaration>node);\n        break;\n      case ts.SyntaxKind.ClassExpression:\n        this.visitClassExpression(<ts.ClassExpression>node);\n        break;\n      case ts.SyntaxKind.CatchClause:\n        this.visitCatchClause(<ts.CatchClause>node);\n        break;\n      case ts.SyntaxKind.ConditionalExpression:\n        this.visitConditionalExpression(<ts.ConditionalExpression>node);\n        break;\n      case ts.SyntaxKind.ConstructSignature:\n        this.visitConstructSignature(<ts.ConstructSignatureDeclaration>node);\n        break;\n      case ts.SyntaxKind.Constructor:\n        this.visitConstructorDeclaration(<ts.ConstructorDeclaration>node);\n        break;\n      case ts.SyntaxKind.ConstructorType:\n        this.visitConstructorType(<ts.FunctionOrConstructorTypeNode>node);\n        break;\n      case ts.SyntaxKind.ContinueStatement:\n        this.visitContinueStatement(<ts.BreakOrContinueStatement>node);\n        break;\n      case ts.SyntaxKind.DebuggerStatement:\n        this.visitDebuggerStatement(<ts.Statement>node);\n        break;\n      case ts.SyntaxKind.DefaultClause:\n        this.visitDefaultClause(<ts.DefaultClause>node);\n        break;\n      case ts.SyntaxKind.DoStatement:\n        this.visitDoStatement(<ts.DoStatement>node);\n        break;\n      case ts.SyntaxKind.ElementAccessExpression:\n        this.visitElementAccessExpression(<ts.ElementAccessExpression>node);\n        break;\n      case ts.SyntaxKind.EnumDeclaration:\n        this.visitEnumDeclaration(<ts.EnumDeclaration>node);\n        break;\n      case ts.SyntaxKind.ExportAssignment:\n        this.visitExportAssignment(<ts.ExportAssignment>node);\n        break;\n      case ts.SyntaxKind.ExpressionStatement:\n        this.visitExpressionStatement(<ts.ExpressionStatement>node);\n        break;\n      case ts.SyntaxKind.ForStatement:\n        this.visitForStatement(<ts.ForStatement>node);\n        break;\n      case ts.SyntaxKind.ForInStatement:\n        this.visitForInStatement(<ts.ForInStatement>node);\n        break;\n      case ts.SyntaxKind.ForOfStatement:\n        this.visitForOfStatement(<ts.ForOfStatement>node);\n        break;\n      case ts.SyntaxKind.FunctionDeclaration:\n        this.visitFunctionDeclaration(<ts.FunctionDeclaration>node);\n        break;\n      case ts.SyntaxKind.FunctionExpression:\n        this.visitFunctionExpression(<ts.FunctionExpression>node);\n        break;\n      case ts.SyntaxKind.FunctionType:\n        this.visitFunctionType(<ts.FunctionOrConstructorTypeNode>node);\n        break;\n      case ts.SyntaxKind.GetAccessor:\n        this.visitGetAccessor(<ts.AccessorDeclaration>node);\n        break;\n      case ts.SyntaxKind.Identifier:\n        this.visitIdentifier(<ts.Identifier>node);\n        break;\n      case ts.SyntaxKind.IfStatement:\n        this.visitIfStatement(<ts.IfStatement>node);\n        break;\n      case ts.SyntaxKind.ImportDeclaration:\n        this.visitImportDeclaration(<ts.ImportDeclaration>node);\n        break;\n      case ts.SyntaxKind.ImportEqualsDeclaration:\n        this.visitImportEqualsDeclaration(<ts.ImportEqualsDeclaration>node);\n        break;\n      case ts.SyntaxKind.IndexSignature:\n        this.visitIndexSignatureDeclaration(<ts.IndexSignatureDeclaration>node);\n        break;\n      case ts.SyntaxKind.InterfaceDeclaration:\n        this.visitInterfaceDeclaration(<ts.InterfaceDeclaration>node);\n        break;\n      case ts.SyntaxKind.JsxAttribute:\n        this.visitJsxAttribute(<ts.JsxAttribute>node);\n        break;\n      case ts.SyntaxKind.JsxElement:\n        this.visitJsxElement(<ts.JsxElement>node);\n        break;\n      case ts.SyntaxKind.JsxExpression:\n        this.visitJsxExpression(<ts.JsxExpression>node);\n        break;\n      case ts.SyntaxKind.JsxSelfClosingElement:\n        this.visitJsxSelfClosingElement(<ts.JsxSelfClosingElement>node);\n        break;\n      case ts.SyntaxKind.JsxSpreadAttribute:\n        this.visitJsxSpreadAttribute(<ts.JsxSpreadAttribute>node);\n        break;\n      case ts.SyntaxKind.LabeledStatement:\n        this.visitLabeledStatement(<ts.LabeledStatement>node);\n        break;\n      case ts.SyntaxKind.MethodDeclaration:\n        this.visitMethodDeclaration(<ts.MethodDeclaration>node);\n        break;\n      case ts.SyntaxKind.MethodSignature:\n        this.visitMethodSignature(<ts.SignatureDeclaration>node);\n        break;\n      case ts.SyntaxKind.ModuleDeclaration:\n        this.visitModuleDeclaration(<ts.ModuleDeclaration>node);\n        break;\n      case ts.SyntaxKind.NamedImports:\n        this.visitNamedImports(<ts.NamedImports>node);\n        break;\n      case ts.SyntaxKind.NamespaceImport:\n        this.visitNamespaceImport(<ts.NamespaceImport>node);\n        break;\n      case ts.SyntaxKind.NewExpression:\n        this.visitNewExpression(<ts.NewExpression>node);\n        break;\n      case ts.SyntaxKind.ObjectBindingPattern:\n        this.visitBindingPattern(<ts.BindingPattern>node);\n        break;\n      case ts.SyntaxKind.ObjectLiteralExpression:\n        this.visitObjectLiteralExpression(<ts.ObjectLiteralExpression>node);\n        break;\n      case ts.SyntaxKind.Parameter:\n        this.visitParameterDeclaration(<ts.ParameterDeclaration>node);\n        break;\n      case ts.SyntaxKind.PostfixUnaryExpression:\n        this.visitPostfixUnaryExpression(<ts.PostfixUnaryExpression>node);\n        break;\n      case ts.SyntaxKind.PrefixUnaryExpression:\n        this.visitPrefixUnaryExpression(<ts.PrefixUnaryExpression>node);\n        break;\n      case ts.SyntaxKind.PropertyAccessExpression:\n        this.visitPropertyAccessExpression(<ts.PropertyAccessExpression>node);\n        break;\n      case ts.SyntaxKind.PropertyAssignment:\n        this.visitPropertyAssignment(<ts.PropertyAssignment>node);\n        break;\n      case ts.SyntaxKind.PropertyDeclaration:\n        this.visitPropertyDeclaration(<ts.PropertyDeclaration>node);\n        break;\n      case ts.SyntaxKind.PropertySignature:\n        this.visitPropertySignature(node);\n        break;\n      case ts.SyntaxKind.RegularExpressionLiteral:\n        this.visitRegularExpressionLiteral(node);\n        break;\n      case ts.SyntaxKind.ReturnStatement:\n        this.visitReturnStatement(<ts.ReturnStatement>node);\n        break;\n      case ts.SyntaxKind.SetAccessor:\n        this.visitSetAccessor(<ts.AccessorDeclaration>node);\n        break;\n      case ts.SyntaxKind.SourceFile:\n        this.visitSourceFile(<ts.SourceFile>node);\n        break;\n      case ts.SyntaxKind.StringLiteral:\n        this.visitStringLiteral(<ts.StringLiteral>node);\n        break;\n      case ts.SyntaxKind.SwitchStatement:\n        this.visitSwitchStatement(<ts.SwitchStatement>node);\n        break;\n      case ts.SyntaxKind.TemplateExpression:\n        this.visitTemplateExpression(<ts.TemplateExpression>node);\n        break;\n      case ts.SyntaxKind.ThrowStatement:\n        this.visitThrowStatement(<ts.ThrowStatement>node);\n        break;\n      case ts.SyntaxKind.TryStatement:\n        this.visitTryStatement(<ts.TryStatement>node);\n        break;\n      case ts.SyntaxKind.TupleType:\n        this.visitTupleType(<ts.TupleTypeNode>node);\n        break;\n      case ts.SyntaxKind.TypeAliasDeclaration:\n        this.visitTypeAliasDeclaration(<ts.TypeAliasDeclaration>node);\n        break;\n      case ts.SyntaxKind.TypeAssertionExpression:\n        this.visitTypeAssertionExpression(<ts.TypeAssertion>node);\n        break;\n      case ts.SyntaxKind.TypeLiteral:\n        this.visitTypeLiteral(<ts.TypeLiteralNode>node);\n        break;\n      case ts.SyntaxKind.TypeReference:\n        this.visitTypeReference(<ts.TypeReferenceNode>node);\n        break;\n      case ts.SyntaxKind.VariableDeclaration:\n        this.visitVariableDeclaration(<ts.VariableDeclaration>node);\n        break;\n      case ts.SyntaxKind.VariableStatement:\n        this.visitVariableStatement(<ts.VariableStatement>node);\n        break;\n      case ts.SyntaxKind.WhileStatement:\n        this.visitWhileStatement(<ts.WhileStatement>node);\n        break;\n      case ts.SyntaxKind.WithStatement:\n        this.visitWithStatement(<ts.WithStatement>node);\n        break;\n      default:\n        console.warn(`unknown node type: ${node}`);\n        break;\n    }\n  }\n\n  visitChildren(node: ts.Node): void {\n    ts.forEachChild(node, (child) => this.visitNode(child));\n  }\n\n  visitAnyKeyword(node: ts.Node): void {\n    this.visitChildren(node);\n  }\n\n  visitArrayLiteralExpression(node: ts.ArrayLiteralExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitArrayType(node: ts.ArrayTypeNode): void {\n    this.visitChildren(node);\n  }\n\n  visitArrowFunction(node: ts.FunctionLikeDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitBinaryExpression(node: ts.BinaryExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitBindingElement(node: ts.BindingElement): void {\n    this.visitChildren(node);\n  }\n\n  visitBindingPattern(node: ts.BindingPattern): void {\n    this.visitChildren(node);\n  }\n\n  visitBlock(node: ts.Block): void {\n    this.visitChildren(node);\n  }\n\n  visitBreakStatement(node: ts.BreakOrContinueStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitCallExpression(node: ts.CallExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitCallSignature(node: ts.SignatureDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitCaseClause(node: ts.CaseClause): void {\n    this.visitChildren(node);\n  }\n\n  visitClassDeclaration(node: ts.ClassDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitClassExpression(node: ts.ClassExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitCatchClause(node: ts.CatchClause): void {\n    this.visitChildren(node);\n  }\n\n  visitConditionalExpression(node: ts.ConditionalExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitConstructSignature(node: ts.ConstructSignatureDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitConstructorDeclaration(node: ts.ConstructorDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitConstructorType(node: ts.FunctionOrConstructorTypeNode): void {\n    this.visitChildren(node);\n  }\n\n  visitContinueStatement(node: ts.BreakOrContinueStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitDebuggerStatement(node: ts.Statement): void {\n    this.visitChildren(node);\n  }\n\n  visitDefaultClause(node: ts.DefaultClause): void {\n    this.visitChildren(node);\n  }\n\n  visitDoStatement(node: ts.DoStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitElementAccessExpression(node: ts.ElementAccessExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitEnumDeclaration(node: ts.EnumDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitExportAssignment(node: ts.ExportAssignment): void {\n    this.visitChildren(node);\n  }\n\n  visitExpressionStatement(node: ts.ExpressionStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitForStatement(node: ts.ForStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitForInStatement(node: ts.ForInStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitForOfStatement(node: ts.ForOfStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitFunctionDeclaration(node: ts.FunctionDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitFunctionExpression(node: ts.FunctionExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitFunctionType(node: ts.FunctionOrConstructorTypeNode): void {\n    this.visitChildren(node);\n  }\n\n  visitGetAccessor(node: ts.AccessorDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitIdentifier(node: ts.Identifier): void {\n    this.visitChildren(node);\n  }\n\n  visitIfStatement(node: ts.IfStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitImportDeclaration(node: ts.ImportDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitImportEqualsDeclaration(node: ts.ImportEqualsDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitIndexSignatureDeclaration(node: ts.IndexSignatureDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitInterfaceDeclaration(node: ts.InterfaceDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitJsxAttribute(node: ts.JsxAttribute): void {\n    this.visitChildren(node);\n  }\n\n  visitJsxElement(node: ts.JsxElement): void {\n    this.visitChildren(node);\n  }\n\n  visitJsxExpression(node: ts.JsxExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitJsxSelfClosingElement(node: ts.JsxSelfClosingElement): void {\n    this.visitChildren(node);\n  }\n\n  visitJsxSpreadAttribute(node: ts.JsxSpreadAttribute): void {\n    this.visitChildren(node);\n  }\n\n  visitLabeledStatement(node: ts.LabeledStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitMethodDeclaration(node: ts.MethodDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitMethodSignature(node: ts.SignatureDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitModuleDeclaration(node: ts.ModuleDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitNamedImports(node: ts.NamedImports): void {\n    this.visitChildren(node);\n  }\n\n  visitNamespaceImport(node: ts.NamespaceImport): void {\n    this.visitChildren(node);\n  }\n\n  visitNewExpression(node: ts.NewExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitObjectLiteralExpression(node: ts.ObjectLiteralExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitParameterDeclaration(node: ts.ParameterDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitPostfixUnaryExpression(node: ts.PostfixUnaryExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitPrefixUnaryExpression(node: ts.PrefixUnaryExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitPropertyAccessExpression(node: ts.PropertyAccessExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitPropertyAssignment(node: ts.PropertyAssignment): void {\n    this.visitChildren(node);\n  }\n\n  visitPropertyDeclaration(node: ts.PropertyDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitPropertySignature(node: ts.Node): void {\n    this.visitChildren(node);\n  }\n\n  visitRegularExpressionLiteral(node: ts.Node): void {\n    this.visitChildren(node);\n  }\n\n  visitReturnStatement(node: ts.ReturnStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitSetAccessor(node: ts.AccessorDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitSourceFile(node: ts.SourceFile): void {\n    this.visitChildren(node);\n  }\n\n  visitStringLiteral(node: ts.StringLiteral): void {\n    this.visitChildren(node);\n  }\n\n  visitSwitchStatement(node: ts.SwitchStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitTemplateExpression(node: ts.TemplateExpression): void {\n    this.visitChildren(node);\n  }\n\n  visitThrowStatement(node: ts.ThrowStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitTryStatement(node: ts.TryStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitTupleType(node: ts.TupleTypeNode): void {\n    this.visitChildren(node);\n  }\n\n  visitTypeAliasDeclaration(node: ts.TypeAliasDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitTypeAssertionExpression(node: ts.TypeAssertion): void {\n    this.visitChildren(node);\n  }\n\n  visitTypeLiteral(node: ts.TypeLiteralNode): void {\n    this.visitChildren(node);\n  }\n\n  visitTypeReference(node: ts.TypeReferenceNode): void {\n    this.visitChildren(node);\n  }\n\n  visitVariableDeclaration(node: ts.VariableDeclaration): void {\n    this.visitChildren(node);\n  }\n\n  visitVariableStatement(node: ts.VariableStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitWhileStatement(node: ts.WhileStatement): void {\n    this.visitChildren(node);\n  }\n\n  visitWithStatement(node: ts.WithStatement): void {\n    this.visitChildren(node);\n  }\n}\n"]}