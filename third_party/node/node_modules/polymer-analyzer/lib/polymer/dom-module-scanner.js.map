{"version":3,"sources":["polymer/dom-module-scanner.ts"],"names":[],"mappings":"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","file":"dom-module-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5';\nimport {ASTNode, treeAdapters} from 'parse5';\n\nimport {HtmlVisitor, ParsedHtmlDocument} from '../html/html-document';\nimport {HtmlScanner} from '../html/html-scanner';\nimport {Feature, getAttachedCommentText, Resolvable, Slot, SourceRange, Warning} from '../model/model';\n\nimport {HtmlDatabindingExpression, scanDatabindingTemplateForExpressions, Template} from './expression-scanner';\nimport {LocalId} from './polymer-element';\n\nconst p = dom5.predicates;\n\nconst isDomModule = p.hasTagName('dom-module');\n\nexport class ScannedDomModule implements Resolvable {\n  id: string|null;\n  node: ASTNode;\n  comment?: string;\n  sourceRange: SourceRange;\n  astNode: dom5.Node;\n  warnings: Warning[] = [];\n  'slots': Slot[];\n  localIds: LocalId[];\n  template: Template|undefined;\n  databindings: HtmlDatabindingExpression[];\n\n  constructor(\n      id: string|null, node: ASTNode, sourceRange: SourceRange, ast: dom5.Node,\n      warnings: Warning[], template: Template|undefined, slots: Slot[],\n      localIds: LocalId[], databindings: HtmlDatabindingExpression[]) {\n    this.id = id;\n    this.node = node;\n    this.comment = getAttachedCommentText(node);\n    this.sourceRange = sourceRange;\n    this.astNode = ast;\n    this.slots = slots;\n    this.localIds = localIds;\n    this.warnings = warnings;\n    this.template = template;\n    this.databindings = databindings;\n  }\n\n  resolve() {\n    return new DomModule(\n        this.node,\n        this.id,\n        this.comment,\n        this.sourceRange,\n        this.astNode,\n        this.warnings,\n        this.slots,\n        this.localIds,\n        this.template,\n        this.databindings);\n  }\n}\n\ndeclare module '../model/queryable' {\n  interface FeatureKindMap {\n    'dom-module': DomModule;\n  }\n}\nexport class DomModule implements Feature {\n  kinds = new Set(['dom-module']);\n  identifiers = new Set<string>();\n  node: ASTNode;\n  id: string|null;\n  comment?: string;\n  sourceRange: SourceRange;\n  astNode: dom5.Node;\n  warnings: Warning[];\n  'slots': Slot[];\n  localIds: LocalId[];\n  template: Template|undefined;\n  databindings: HtmlDatabindingExpression[];\n\n  constructor(\n      node: ASTNode, id: string|null, comment: string|undefined,\n      sourceRange: SourceRange, ast: dom5.Node, warnings: Warning[],\n      slots: Slot[], localIds: LocalId[], template: Template|undefined,\n      databindings: HtmlDatabindingExpression[]) {\n    this.node = node;\n    this.id = id;\n    this.comment = comment;\n    if (id) {\n      this.identifiers.add(id);\n    }\n    this.sourceRange = sourceRange;\n    this.astNode = ast;\n    this.warnings = warnings;\n    this.slots = slots;\n    this.localIds = localIds;\n    this.template = template;\n    this.databindings = databindings;\n  }\n}\n\nexport class DomModuleScanner implements HtmlScanner {\n  async scan(\n      document: ParsedHtmlDocument,\n      visit: (visitor: HtmlVisitor) => Promise<void>) {\n    const domModules: ScannedDomModule[] = [];\n\n    await visit((node) => {\n      if (isDomModule(node)) {\n        const children = dom5.defaultChildNodes(node) || [];\n        const template = children.find(\n            dom5.predicates.hasTagName('template')) as (Template | undefined);\n        let slots: Slot[] = [];\n        let localIds: LocalId[] = [];\n        let databindings: HtmlDatabindingExpression[] = [];\n        let warnings: Warning[] = [];\n        if (template) {\n          const templateContent =\n              treeAdapters.default.getTemplateContent(template);\n          slots =\n              dom5.queryAll(templateContent, dom5.predicates.hasTagName('slot'))\n                  .map(\n                      (s) => new Slot(\n                          dom5.getAttribute(s, 'name') || '',\n                          document.sourceRangeForNode(s)!));\n          localIds =\n              dom5.queryAll(templateContent, dom5.predicates.hasAttr('id'))\n                  .map(\n                      (e) => new LocalId(\n                          dom5.getAttribute(e, 'id')!,\n                          document.sourceRangeForNode(e)!));\n          const results =\n              scanDatabindingTemplateForExpressions(document, template);\n          warnings = results.warnings;\n          databindings = results.expressions;\n        }\n        domModules.push(new ScannedDomModule(\n            dom5.getAttribute(node, 'id'),\n            node,\n            document.sourceRangeForNode(node)!,\n            node,\n            warnings,\n            template,\n            slots,\n            localIds,\n            databindings));\n      }\n    });\n    return {features: domModules};\n  }\n}\n"]}