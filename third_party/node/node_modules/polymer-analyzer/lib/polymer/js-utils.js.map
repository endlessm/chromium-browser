{"version":3,"sources":["polymer/js-utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,qCAAqC;AAGrC,iDAAoI;AACpI,6CAA6C;AAC7C,0CAA8D;AAK9D;;GAEG;AACH,kCACI,IAA6C,EAC7C,WAAwB,EACxB,QAAkC;IACpC,MAAM,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,2BAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACrE,MAAM,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IACnD,MAAM,SAAS,GAAG,0BAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE9C,MAAM,QAAQ,GAAc,EAAE,CAAC;IAC/B,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QACf,QAAQ,CAAC,IAAI,CAAC,IAAI,eAAO,CAAC;YACxB,IAAI,EAAE,mBAAmB;YACzB,OAAO,EACH,gEAAgE;gBAChE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;YACtB,WAAW,EAAE,WAAW;YACxB,QAAQ,EAAE,gBAAQ,CAAC,OAAO;YAC1B,cAAc,EAAE,QAAQ;SACzB,CAAC,CAAC,CAAC;IACN,CAAC;IACD,IAAI,IAAI,GAAG,oBAAW,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC1D,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAClD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAK,CAAC,IAAI,IAAI,CAAC;IACxD,CAAC;IACD,MAAM,IAAI,GAAG,SAAS,IAAI,EAAE,CAAC;IAC7B,MAAM,MAAM,GAA2B;QACrC,IAAI;QACJ,IAAI;QACJ,WAAW;QACX,WAAW;QACX,QAAQ;QACR,OAAO,EAAE,IAAI;QACb,eAAe,EAAE,gCAAuB,CAAC,GAAG,CAAC,IAAI,CAAC;QAClD,KAAK,EAAE,WAAW;QAClB,OAAO,EAAE,0BAAiB,CAAC,IAAI,EAAE,WAAW,CAAC;KAC9C,CAAC;IAEF,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAvCD,4DAuCC;AAAA,CAAC","file":"js-utils.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as doctrine from 'doctrine';\nimport * as estree from 'estree';\n\nimport {closureType, configurationProperties, getAttachedComment, getOrInferPrivacy, objectKeyToString} from '../javascript/esutil';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {Severity, SourceRange, Warning} from '../model/model';\nimport {ParsedDocument} from '../parser/document';\n\nimport {ScannedPolymerProperty} from './polymer-element';\n\n/**\n * Create a ScannedProperty object from an estree Property AST node.\n */\nexport function toScannedPolymerProperty(\n    node: estree.Property|estree.MethodDefinition,\n    sourceRange: SourceRange,\n    document: ParsedDocument<any, any>): ScannedPolymerProperty {\n  const parsedJsdoc = jsdoc.parseJsdoc(getAttachedComment(node) || '');\n  const description = parsedJsdoc.description.trim();\n  const maybeName = objectKeyToString(node.key);\n\n  const warnings: Warning[] = [];\n  if (!maybeName) {\n    warnings.push(new Warning({\n      code: 'unknown-prop-name',\n      message:\n          `Could not determine name of property from expression of type: ` +\n          `${node.key.type}`,\n      sourceRange: sourceRange,\n      severity: Severity.WARNING,\n      parsedDocument: document\n    }));\n  }\n  let type = closureType(node.value, sourceRange, document);\n  const typeTag = jsdoc.getTag(parsedJsdoc, 'type');\n  if (typeTag) {\n    type = doctrine.type.stringify(typeTag.type!) || type;\n  }\n  const name = maybeName || '';\n  const result: ScannedPolymerProperty = {\n    name,\n    type,\n    description,\n    sourceRange,\n    warnings,\n    astNode: node,\n    isConfiguration: configurationProperties.has(name),\n    jsdoc: parsedJsdoc,\n    privacy: getOrInferPrivacy(name, parsedJsdoc)\n  };\n\n  return result;\n};\n"]}