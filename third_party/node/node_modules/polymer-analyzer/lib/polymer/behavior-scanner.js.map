{"version":3,"sources":["polymer/behavior-scanner.ts"],"names":[],"mappings":"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","file":"behavior-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as estree from 'estree';\n\nimport {getIdentifierName, getNamespacedIdentifier} from '../javascript/ast-value';\nimport {Visitor} from '../javascript/estree-visitor';\nimport * as esutil from '../javascript/esutil';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {JavaScriptScanner} from '../javascript/javascript-scanner';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {Severity, Warning} from '../model/model';\n\nimport {ScannedBehavior, ScannedBehaviorAssignment} from './behavior';\nimport {declarationPropertyHandlers, PropertyHandlers} from './declaration-property-handlers';\nimport * as docs from './docs';\nimport {toScannedPolymerProperty} from './js-utils';\n\nconst templatizer = 'Polymer.Templatizer';\n\nexport class BehaviorScanner implements JavaScriptScanner {\n  async scan(\n      document: JavaScriptDocument,\n      visit: (visitor: Visitor) => Promise<void>) {\n    const visitor = new BehaviorVisitor(document);\n    await visit(visitor);\n    return {\n      features: Array.from(visitor.behaviors),\n      warnings: visitor.warnings\n    };\n  }\n}\n\nclass BehaviorVisitor implements Visitor {\n  /** The behaviors we've found. */\n  behaviors = new Set<ScannedBehavior>();\n  warnings: Warning[] = [];\n  currentBehavior: ScannedBehavior|null = null;\n  propertyHandlers: PropertyHandlers|null = null;\n\n  document: JavaScriptDocument;\n  constructor(document: JavaScriptDocument) {\n    this.document = document;\n  }\n\n  /**\n   * Look for object declarations with @polymerBehavior in the docs.\n   */\n  enterVariableDeclaration(\n      node: estree.VariableDeclaration, _parent: estree.Node) {\n    if (node.declarations.length !== 1) {\n      return;  // Ambiguous.\n    }\n    this._initBehavior(node, () => {\n      const id = node.declarations[0].id;\n      return esutil.objectKeyToString(id)!;\n    });\n  }\n\n  /**\n   * Look for object assignments with @polymerBehavior in the docs.\n   */\n  enterAssignmentExpression(\n      node: estree.AssignmentExpression, parent: estree.Node) {\n    this._initBehavior(parent, () => esutil.objectKeyToString(node.left)!);\n  }\n\n  /**\n   * We assume that the object expression after such an assignment is the\n   * behavior's declaration. Seems to be a decent assumption for now.\n   */\n  enterObjectExpression(node: estree.ObjectExpression, _parent: estree.Node) {\n    if (!this.currentBehavior || !this.propertyHandlers) {\n      return;\n    }\n\n    for (const prop of node.properties) {\n      const name = esutil.objectKeyToString(prop.key);\n      if (!name) {\n        this.currentBehavior.warnings.push(new Warning({\n          code: 'cant-determine-name',\n          message:\n              `Unable to determine property name from expression of type ` +\n              `${node.type}`,\n          severity: Severity.WARNING,\n          sourceRange: this.document.sourceRangeForNode(node)!,\n          parsedDocument: this.document\n        }));\n        continue;\n      }\n      if (name in this.propertyHandlers) {\n        this.propertyHandlers[name](prop.value);\n      } else if (esutil.isFunctionType(prop.value)) {\n        const method = esutil.toScannedMethod(\n            prop, this.document.sourceRangeForNode(prop)!, this.document);\n        this.currentBehavior.addMethod(method);\n      } else {\n        const property = toScannedPolymerProperty(\n            prop, this.document.sourceRangeForNode(prop)!, this.document);\n        this.currentBehavior.addProperty(property);\n      }\n    }\n    this._finishBehavior();\n  }\n\n  private _startBehavior(behavior: ScannedBehavior) {\n    console.assert(this.currentBehavior == null);\n    this.currentBehavior = behavior;\n  }\n\n  private _finishBehavior() {\n    console.assert(this.currentBehavior != null);\n    this.behaviors.add(this.currentBehavior!);\n    this.currentBehavior = null;\n  }\n\n  private _initBehavior(node: estree.Node, getName: () => string) {\n    const comment = esutil.getAttachedComment(node);\n    const symbol = getName();\n    // Quickly filter down to potential candidates.\n    if (!comment || comment.indexOf('@polymerBehavior') === -1) {\n      if (symbol !== templatizer) {\n        return;\n      }\n    }\n    const parsedJsdocs = jsdoc.parseJsdoc(comment || '');\n    if (!jsdoc.hasTag(parsedJsdocs, 'polymerBehavior')) {\n      if (symbol !== templatizer) {\n        return;\n      }\n    }\n\n    this._startBehavior(new ScannedBehavior({\n      astNode: node,\n      description: parsedJsdocs.description,\n      events: esutil.getEventComments(node),\n      sourceRange: this.document.sourceRangeForNode(node),\n      privacy: esutil.getOrInferPrivacy(symbol, parsedJsdocs),\n      abstract: jsdoc.hasTag(parsedJsdocs, 'abstract'),\n      attributes: new Map(),\n      properties: [],\n      behaviors: [],\n      className: undefined,\n      extends: undefined,\n      jsdoc: parsedJsdocs,\n      listeners: [],\n      methods: new Map(),\n      staticMethods: new Map(),\n      mixins: [],\n      observers: [],\n      superClass: undefined,\n      tagName: undefined\n    }));\n    const behavior = this.currentBehavior!;\n\n    this.propertyHandlers =\n        declarationPropertyHandlers(behavior, this.document);\n\n    docs.annotateElementHeader(behavior);\n    const behaviorTag = jsdoc.getTag(behavior.jsdoc, 'polymerBehavior');\n    behavior.className = behaviorTag && behaviorTag.name ||\n        getNamespacedIdentifier(symbol, behavior.jsdoc);\n    if (!behavior.className) {\n      throw new Error(\n          `Unable to determine name for @polymerBehavior: ${comment}`);\n    }\n\n    behavior.privacy =\n        esutil.getOrInferPrivacy(behavior.className, behavior.jsdoc);\n    this._parseChainedBehaviors(node);\n\n    this.currentBehavior = this.mergeBehavior(behavior);\n    this.propertyHandlers =\n        declarationPropertyHandlers(this.currentBehavior, this.document);\n\n    // Some behaviors are just lists of other behaviors. If this is one then\n    // add it to behaviors right away.\n    if (isSimpleBehaviorArray(behaviorExpression(node))) {\n      this._finishBehavior();\n    }\n  }\n\n  /**\n   * merges behavior with preexisting behavior with the same name.\n   * here to support multiple @polymerBehavior tags referring\n   * to same behavior. See iron-multi-selectable for example.\n   */\n  mergeBehavior(newBehavior: ScannedBehavior): ScannedBehavior {\n    const isBehaviorImpl = (b: ScannedBehaviorAssignment) => {\n      // filter out BehaviorImpl\n      return b.name.indexOf(newBehavior.className) === -1;\n    };\n    for (const behavior of this.behaviors) {\n      if (newBehavior.className !== behavior.className) {\n        continue;\n      }\n      // TODO(justinfagnani): what?\n      // merge desc, longest desc wins\n      if (newBehavior.description) {\n        if (behavior.description) {\n          if (newBehavior.description.length > behavior.description.length)\n            behavior.description = newBehavior.description;\n        } else {\n          behavior.description = newBehavior.description;\n        }\n      }\n      // TODO(justinfagnani): move into ScannedBehavior\n      behavior.demos = behavior.demos.concat(newBehavior.demos);\n      for (const [key, val] of newBehavior.events) {\n        behavior.events.set(key, val);\n      }\n      for (const property of newBehavior.properties.values()) {\n        behavior.addProperty(property);\n      }\n      behavior.observers = behavior.observers.concat(newBehavior.observers);\n      behavior.behaviorAssignments =\n          (behavior.behaviorAssignments)\n              .concat(newBehavior.behaviorAssignments)\n              .filter(isBehaviorImpl);\n      return behavior;\n    }\n    return newBehavior;\n  }\n\n  _parseChainedBehaviors(node: estree.Node) {\n    if (this.currentBehavior == null) {\n      throw new Error(\n          `_parsedChainedBehaviors was called without a current behavior.`);\n    }\n    // if current behavior is part of an array, it gets extended by other\n    // behaviors\n    // inside the array. Ex:\n    // Polymer.IronMultiSelectableBehavior = [ {....},\n    // Polymer.IronSelectableBehavior]\n    // We add these to behaviors array\n    const expression = behaviorExpression(node);\n    const chained: Array<ScannedBehaviorAssignment> = [];\n    if (expression && expression.type === 'ArrayExpression') {\n      for (const arrElement of expression.elements) {\n        const behaviorName = getIdentifierName(arrElement);\n        if (behaviorName) {\n          chained.push({\n            name: behaviorName,\n            sourceRange: this.document.sourceRangeForNode(arrElement)!\n          });\n        }\n      }\n      if (chained.length > 0) {\n        this.currentBehavior.behaviorAssignments = chained;\n      }\n    }\n  }\n}\n\n/**\n * gets the expression representing a behavior from a node.\n */\nfunction behaviorExpression(node: estree.Node): estree.Node|undefined {\n  switch (node.type) {\n    case 'ExpressionStatement':\n      // need to cast to `any` here because ExpressionStatement is super\n      // super general. this code is suspicious.\n      return (<any>node).expression.right;\n    case 'VariableDeclaration':\n      return node.declarations.length > 0 ? node.declarations[0].init :\n                                            undefined;\n  }\n}\n\n/**\n * checks whether an expression is a simple array containing only member\n * expressions or identifiers.\n */\nfunction isSimpleBehaviorArray(expression: estree.Node|undefined): boolean {\n  if (!expression || expression.type !== 'ArrayExpression') {\n    return false;\n  }\n  for (const element of expression.elements) {\n    if (element.type !== 'MemberExpression' && element.type !== 'Identifier') {\n      return false;\n    }\n  }\n  return true;\n}\n"]}