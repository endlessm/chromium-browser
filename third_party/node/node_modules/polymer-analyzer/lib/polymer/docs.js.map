{"version":3,"sources":["polymer/docs.ts"],"names":[],"mappings":"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","file":"docs.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as doctrine from 'doctrine';\nimport * as jsdoc from '../javascript/jsdoc';\nimport {ScannedEvent} from '../model/model';\n\nimport {ScannedPolymerElement, ScannedPolymerProperty} from './polymer-element';\n\n// TODO(rictic): destroy this file with great abadon. It's the oldest and\n//     hardest to understand in the repo at this point I think.\n\n// This is to prevent warnings that annotateProperty is unused.\n// It is unused, but we want to extract the good bits from this file\n// before we delete the whole thing.\nif (Math.random() > 1000) {\n  annotateProperty.name;\n}\n\n/**\n * Annotates Hydrolysis scanned features, processing any descriptions as\n * JSDoc.\n *\n * You probably want to use a more specialized version of this, such as\n * `annotateElement`.\n *\n * Processed JSDoc values will be made available via the `jsdoc` property on a\n * scanned feature.\n */\nexport function annotate(\n    feature: {jsdoc?: jsdoc.Annotation, description?: string}): void {\n  if (!feature || feature.jsdoc) {\n    return;\n  }\n\n  if (typeof feature.description === 'string') {\n    feature.jsdoc = jsdoc.parseJsdoc(feature.description);\n    // We want to present the normalized form of a feature.\n    feature.description = feature.jsdoc.description;\n  }\n\n  return;\n}\n\n/**\n * Annotates @event, @hero, & @demo tags\n */\nexport function annotateElementHeader(scannedElement: ScannedPolymerElement) {\n  scannedElement.demos = [];\n  if (scannedElement.jsdoc && scannedElement.jsdoc.tags) {\n    scannedElement.jsdoc.tags.forEach((tag) => {\n      switch (tag.title) {\n        case 'demo':\n          scannedElement.demos.push(\n              {desc: 'demo', path: tag.description || 'demo/index.html'});\n          break;\n      }\n    });\n  }\n}\n\n/**\n * Annotates event documentation\n */\nexport function annotateEvent(annotation: jsdoc.Annotation): ScannedEvent {\n  const eventTag = jsdoc.getTag(annotation, 'event');\n  let name: string;\n  if (eventTag && eventTag.description) {\n    name = (eventTag.description || '').match(/^\\S*/)![0];\n  } else {\n    name = 'N/A';\n  }\n  const scannedEvent: ScannedEvent = {\n    name: name,\n    description: (eventTag && eventTag.description) || annotation.description,\n    jsdoc: annotation,\n    sourceRange: undefined,\n    astNode: null,\n    warnings: [],\n    params: []\n  };\n\n  const tags = (annotation && annotation.tags || []);\n  // process @params\n  scannedEvent.params.push(\n      ...tags.filter((tag) => tag.title === 'param').map((param) => {\n        return {\n          type: param.type ? doctrine.type.stringify(param.type) : 'N/A',\n          desc: param.description || '',\n          name: param.name || 'N/A'\n        };\n      }));\n  // process @params\n  return scannedEvent;\n}\n\n/**\n * Annotates documentation found about a scanned polymer property.\n *\n * @param feature\n * @param ignoreConfiguration If true, `configuration` is not set.\n * @return The descriptior that was given.\n */\nfunction annotateProperty(feature: ScannedPolymerProperty):\n    ScannedPolymerProperty {\n  annotate(feature);\n\n  // @type JSDoc wins\n  const typeTag = jsdoc.getTag(feature.jsdoc, 'type');\n  if (typeTag !== undefined && typeTag.type != null) {\n    feature.type = doctrine.type.stringify(typeTag.type);\n  }\n\n  // @default JSDoc wins\n  const defaultTag = jsdoc.getTag(feature.jsdoc, 'default');\n  if (defaultTag !== undefined) {\n    const newDefault = (defaultTag.name || '') + (defaultTag.description || '');\n    if (newDefault !== '') {\n      feature.default = newDefault;\n    }\n  }\n\n  return feature;\n}\n"]}