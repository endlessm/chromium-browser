{"version":3,"sources":["polymer/polymer-element.ts"],"names":[],"mappings":"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","file":"polymer-element.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5';\nimport * as estree from 'estree';\n\nimport * as jsdoc from '../javascript/jsdoc';\nimport {Annotation as JsDocAnnotation} from '../javascript/jsdoc';\nimport {ImmutableArray} from '../model/immutable';\nimport {Class, Document, Element, ElementBase, LiteralValue, Privacy, Property, ScannedAttribute, ScannedElement, ScannedElementBase, ScannedEvent, ScannedMethod, ScannedProperty, Severity, SourceRange, Warning} from '../model/model';\nimport {ScannedReference} from '../model/reference';\n\nimport {Behavior, ScannedBehaviorAssignment} from './behavior';\nimport {DomModule} from './dom-module-scanner';\nimport {JavascriptDatabindingExpression} from './expression-scanner';\n\nexport interface BasePolymerProperty {\n  published?: boolean;\n  notify?: boolean;\n  observer?: string;\n  observerNode?: estree.Expression|estree.Pattern;\n  observerExpression?: JavascriptDatabindingExpression;\n  reflectToAttribute?: boolean;\n  computedExpression?: JavascriptDatabindingExpression;\n  /**\n   * True if the property is part of Polymer's element configuration syntax.\n   *\n   * e.g. 'properties', 'is', 'extends', etc\n   */\n  isConfiguration?: boolean;\n}\n\nexport interface ScannedPolymerProperty extends ScannedProperty,\n                                                BasePolymerProperty {}\nexport interface PolymerProperty extends Property, BasePolymerProperty {}\n\nexport class LocalId {\n  name: string;\n  range: SourceRange;\n\n  constructor(name: string, range: SourceRange) {\n    this.name = name;\n    this.range = range;\n  }\n}\n\nexport interface Observer {\n  javascriptNode: estree.Expression|estree.SpreadElement;\n  expression: LiteralValue;\n  parsedExpression: JavascriptDatabindingExpression|undefined;\n}\n\nexport interface Options {\n  tagName: string|undefined;\n  className: string|undefined;\n  superClass: ScannedReference|undefined;\n  mixins: ScannedReference[];\n  extends: string|undefined;\n  jsdoc: JsDocAnnotation;\n  description: string|undefined;\n  properties: ScannedProperty[];\n  methods: Map<string, ScannedMethod>;\n  staticMethods: Map<string, ScannedMethod>;\n  attributes: Map<string, ScannedAttribute>;\n  observers: Observer[];\n  listeners: {event: string, handler: string}[];\n  behaviors: ScannedBehaviorAssignment[];\n\n  events: Map<string, ScannedEvent>;\n\n  abstract: boolean;\n  privacy: Privacy;\n  astNode: any;\n  sourceRange: SourceRange|undefined;\n}\n\nexport interface ScannedPolymerExtension extends ScannedElementBase {\n  properties: Map<string, ScannedPolymerProperty>;\n  methods: Map<string, ScannedMethod>;\n  observers: Observer[];\n  listeners: {event: string, handler: string}[];\n  behaviorAssignments: ScannedBehaviorAssignment[];\n  // FIXME(rictic): domModule and scriptElement aren't known at a file local\n  //     level. Remove them here, they should only exist on PolymerElement.\n  domModule?: dom5.Node;\n  scriptElement?: dom5.Node;\n  // TODO(justinfagnani): Not Polymer-specific, and hopefully not necessary\n  pseudo: boolean;\n\n  addProperty(prop: ScannedPolymerProperty): void;\n}\n\nexport function addProperty(\n    target: ScannedPolymerExtension, prop: ScannedPolymerProperty) {\n  target.properties.set(prop.name, prop);\n  const attributeName = propertyToAttributeName(prop.name);\n  // Don't produce attributes or events for nonpublic properties, properties\n  // that aren't in Polymer's `properties` block (i.e. not published),\n  // or properties whose names can't be converted into attribute names.\n  if ((prop.privacy && prop.privacy !== 'public') || !attributeName ||\n      !prop.published) {\n    return;\n  }\n  target.attributes.set(attributeName, {\n    name: attributeName,\n    sourceRange: prop.sourceRange,\n    description: prop.description,\n    type: prop.type,\n    changeEvent: prop.notify ? `${attributeName}-changed` : undefined\n  });\n  if (prop.notify) {\n    const name = `${attributeName}-changed`;\n    target.events.set(name, {\n      name,\n      description: `Fired when the \\`${prop.name}\\` property changes.`,\n      sourceRange: prop.sourceRange,\n      astNode: prop.astNode,\n      warnings: [],\n      params: []\n    });\n  }\n}\n\nexport function addMethod(\n    target: ScannedPolymerExtension, method: ScannedMethod) {\n  target.methods.set(method.name, method);\n}\n\n/**\n * The metadata for a single polymer element\n */\nexport class ScannedPolymerElement extends ScannedElement implements\n    ScannedPolymerExtension {\n  properties = new Map<string, ScannedPolymerProperty>();\n  methods = new Map<string, ScannedMethod>();\n  observers: Observer[] = [];\n  listeners: {event: string, handler: string}[] = [];\n  behaviorAssignments: ScannedBehaviorAssignment[] = [];\n  // FIXME(rictic): domModule and scriptElement aren't known at a file local\n  //     level. Remove them here, they should only exist on PolymerElement.\n  domModule?: dom5.Node;\n  scriptElement?: dom5.Node;\n  // Indicates if an element is a pseudo element\n  pseudo: boolean = false;\n  abstract: boolean = false;\n\n  constructor(options: Options) {\n    super();\n    this.tagName = options.tagName;\n    this.className = options.className;\n    this.superClass = options.superClass;\n    this.mixins = options.mixins;\n    this.extends = options.extends;\n    this.jsdoc = options.jsdoc;\n    this.description = options.description || '';\n    this.attributes = options.attributes;\n    this.observers = options.observers;\n    this.listeners = options.listeners;\n    this.behaviorAssignments = options.behaviors;\n    this.events = options.events;\n    this.abstract = options.abstract;\n    this.privacy = options.privacy;\n    this.astNode = options.astNode;\n    this.sourceRange = options.sourceRange;\n\n    if (options.properties) {\n      options.properties.forEach((p) => this.addProperty(p));\n    }\n    if (options.methods) {\n      options.methods.forEach((m) => this.addMethod(m));\n    }\n    const summaryTag = jsdoc.getTag(this.jsdoc, 'summary');\n    this.summary =\n        (summaryTag !== undefined && summaryTag.description != null) ?\n        summaryTag.description :\n        '';\n  }\n\n  addProperty(prop: ScannedPolymerProperty) {\n    addProperty(this, prop);\n  }\n\n  addMethod(method: ScannedMethod) {\n    addMethod(this, method);\n  }\n\n  resolve(document: Document): PolymerElement {\n    return new PolymerElement(this, document);\n  }\n}\n\nexport interface PolymerExtension extends ElementBase {\n  properties: Map<string, PolymerProperty>;\n\n  observers: ImmutableArray < {\n    javascriptNode: estree.Expression|estree.SpreadElement,\n        expression: LiteralValue,\n        parsedExpression: JavascriptDatabindingExpression|undefined;\n  }\n  > ;\n  listeners: ImmutableArray<{event: string, handler: string}>;\n  behaviorAssignments: ImmutableArray<ScannedBehaviorAssignment>;\n  scriptElement?: dom5.Node;\n  localIds: ImmutableArray<LocalId>;\n\n  emitPropertyMetadata(property: PolymerProperty): any;\n}\n\ndeclare module '../model/queryable' {\n  interface FeatureKindMap {\n    'polymer-element': PolymerElement;\n    'pseudo-element': Element;\n  }\n}\n\nexport class PolymerElement extends Element implements PolymerExtension {\n  readonly properties: Map<string, PolymerProperty>;\n  readonly observers: ImmutableArray<Observer> = [];\n  readonly listeners: ImmutableArray<{event: string, handler: string}> = [];\n  readonly behaviorAssignments: ImmutableArray<ScannedBehaviorAssignment> = [];\n  readonly domModule?: dom5.Node;\n  readonly scriptElement?: dom5.Node;\n  readonly localIds: ImmutableArray<LocalId> = [];\n\n  constructor(scannedElement: ScannedPolymerElement, document: Document) {\n    super(scannedElement, document);\n    this.kinds.add('polymer-element');\n\n    this.observers = Array.from(scannedElement.observers);\n    this.listeners = Array.from(scannedElement.listeners);\n    this.behaviorAssignments = Array.from(scannedElement.behaviorAssignments);\n    this.scriptElement = scannedElement.scriptElement;\n\n    const domModules = scannedElement.tagName == null ?\n        new Set<DomModule>() :\n        document.getFeatures({\n          kind: 'dom-module',\n          id: scannedElement.tagName,\n          imported: true,\n          externalPackages: true\n        });\n    let domModule = undefined;\n    if (domModules.size === 1) {\n      // TODO(rictic): warn if this isn't true.\n      domModule = domModules.values().next().value;\n    }\n\n    if (domModule) {\n      this.description = this.description || domModule.comment || '';\n      this.domModule = domModule.node;\n      this.slots = this.slots.concat(domModule.slots);\n      this.localIds = domModule.localIds.slice();\n    }\n\n    if (scannedElement.pseudo) {\n      this.kinds.add('pseudo-element');\n    }\n  }\n\n  emitPropertyMetadata(property: PolymerProperty) {\n    const polymerMetadata:\n        {notify?: boolean, observer?: string, readOnly?: boolean} = {};\n    const polymerMetadataFields: Array<keyof typeof polymerMetadata> =\n        ['notify', 'observer', 'readOnly'];\n    for (const field of polymerMetadataFields) {\n      if (field in property) {\n        polymerMetadata[field] = property[field];\n      }\n    }\n    return {polymer: polymerMetadata};\n  }\n\n  protected _getSuperclassAndMixins(\n      document: Document, init: ScannedPolymerElement): Class[] {\n    const prototypeChain = super._getSuperclassAndMixins(document, init);\n\n    const {warnings, behaviors} =\n        getBehaviors(init.behaviorAssignments, document);\n\n    this.warnings.push(...warnings);\n    prototypeChain.push(...behaviors);\n    return prototypeChain;\n  }\n}\n\n/**\n * Implements Polymer core's translation of property names to attribute names.\n *\n * Returns null if the property name cannot be so converted.\n */\nfunction propertyToAttributeName(propertyName: string): string|null {\n  // Polymer core will not map a property name that starts with an uppercase\n  // character onto an attribute.\n  if (propertyName[0].toUpperCase() === propertyName[0]) {\n    return null;\n  }\n  return propertyName.replace(\n      /([A-Z])/g, (_: string, c1: string) => `-${c1.toLowerCase()}`);\n}\n\nexport function getBehaviors(\n    behaviorAssignments: ImmutableArray<ScannedBehaviorAssignment>,\n    document: Document) {\n  const warnings: Warning[] = [];\n  const behaviors: Behavior[] = [];\n  for (const behavior of behaviorAssignments) {\n    const foundBehaviors = document.getFeatures({\n      kind: 'behavior',\n      id: behavior.name,\n      imported: true,\n      externalPackages: true\n    });\n    if (foundBehaviors.size === 0) {\n      warnings.push(new Warning({\n        message: `Unable to resolve behavior ` +\n            `\\`${behavior.name}\\`. Did you import it? Is it annotated with ` +\n            `@polymerBehavior?`,\n        severity: Severity.WARNING,\n        code: 'unknown-polymer-behavior',\n        sourceRange: behavior.sourceRange,\n        parsedDocument: document.parsedDocument\n      }));\n      // Skip processing this behavior.\n      continue;\n    }\n    if (foundBehaviors.size > 1) {\n      warnings.push(new Warning({\n        message: `Found more than one behavior named ${behavior.name}.`,\n        severity: Severity.WARNING,\n        code: 'multiple-polymer-behaviors',\n        sourceRange: behavior.sourceRange,\n        parsedDocument: document.parsedDocument\n      }));\n      // Don't skip processing this behavior, just take the most recently\n      // declared instance.\n    }\n    const foundBehavior = Array.from(foundBehaviors)[foundBehaviors.size - 1];\n    behaviors.push(foundBehavior);\n  }\n  return {warnings, behaviors};\n}\n"]}