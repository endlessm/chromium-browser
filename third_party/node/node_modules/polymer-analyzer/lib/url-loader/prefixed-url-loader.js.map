{"version":3,"sources":["url-loader/prefixed-url-loader.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAIH;;;GAGG;AACH;IACE,YAAmB,MAAc,EAAS,QAAmB;QAA1C,WAAM,GAAN,MAAM,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAW;IAC7D,CAAC;IAED,OAAO,CAAC,GAAW;QACjB,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IACjD,CAAC;IAEK,IAAI,CAAC,GAAW;;YACpB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACjC,MAAM,IAAI,KAAK,CACX,iBAAiB,GAAG,6BAA6B,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;YACxE,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QACjD,CAAC;KAAA;IAEO,SAAS,CAAC,GAAW;QAC3B,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;CACF;AApBD,8CAoBC","file":"prefixed-url-loader.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {UrlLoader} from './url-loader';\n\n/**\n * Resolves requests via a given delegate loader for URLs matching a given\n * prefix. URLs are provided to their delegate without the prefix.\n */\nexport class PrefixedUrlLoader implements UrlLoader {\n  constructor(public prefix: string, public delegate: UrlLoader) {\n  }\n\n  canLoad(url: string): boolean {\n    return url.startsWith(this.prefix) &&\n        this.delegate.canLoad(this._unprefix(url));\n  }\n\n  async load(url: string): Promise<string> {\n    if (!url.startsWith(this.prefix)) {\n      throw new Error(\n          `Can not load \"${url}\", does not match prefix \"${this.prefix}\".`);\n    }\n    return this.delegate.load(this._unprefix(url));\n  }\n\n  private _unprefix(url: string): string {\n    return url.slice(this.prefix.length);\n  }\n}\n"]}