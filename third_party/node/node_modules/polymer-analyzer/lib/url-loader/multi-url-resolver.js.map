{"version":3,"sources":["url-loader/multi-url-resolver.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAIH;;GAEG;AACH;IACE,YAAoB,UAA8B;QAA9B,eAAU,GAAV,UAAU,CAAoB;QAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACvB,CAAC;IACH,CAAC;IAED,UAAU,CAAC,GAAW;QACpB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,QAAQ;YACnC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,CAAC,GAAW;QACjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACpC,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC7B,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,2BAA2B,GAAG,GAAG,CAAC,CAAC;IACrD,CAAC;CACF;AAtBD,4CAsBC","file":"multi-url-resolver.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {UrlResolver} from './url-resolver';\n\n/**\n * Resolves a URL using multiple resolvers.\n */\nexport class MultiUrlResolver implements UrlResolver {\n  constructor(private _resolvers: Array<UrlResolver>) {\n    if (!this._resolvers) {\n      this._resolvers = [];\n    }\n  }\n\n  canResolve(url: string): boolean {\n    return this._resolvers.some((resolver) => {\n      return resolver.canResolve(url);\n    });\n  }\n\n  resolve(url: string): string {\n    for (let i = 0; i < this._resolvers.length; i++) {\n      const resolver = this._resolvers[i];\n      if (resolver.canResolve(url)) {\n        return resolver.resolve(url);\n      }\n    }\n    throw new Error('No resolver can resolve: ' + url);\n  }\n}\n"]}