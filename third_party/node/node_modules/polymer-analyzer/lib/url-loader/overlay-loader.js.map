{"version":3,"sources":["url-loader/overlay-loader.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAKH;IACE,OAAO,CAAC,IAAY;QAClB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACD,IAAI,CAAC,GAAW;QACd,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,qCAAqC,CAAC,CAAC;IAC/D,CAAC;CACF;AAED;;;;;;;;;;;GAWG;AACH;IAIE,YAAY,cAA0B;QAFtC,mBAAc,GAAG,IAAI,GAAG,EAAkB,CAAC;QAGzC,IAAI,CAAC,eAAe,GAAG,cAAc,IAAI,IAAI,aAAa,EAAE,CAAC;QAC7D,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,aAAa;gBACd,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED,OAAO,CAAC,GAAW;QACjB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC3E,CAAC;IAEK,IAAI,CAAC,GAAW;;YACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,QAAQ,CAAC;YAClB,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxC,CAAC;KAAA;CAIF;AA1BD,4DA0BC","file":"overlay-loader.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {UrlLoader} from './url-loader';\n\n\nclass FailUrlLoader implements UrlLoader {\n  canLoad(_url: string): boolean {\n    return true;\n  }\n  load(url: string): Promise<string> {\n    throw new Error(`${url} not known in InMemoryOverlayLoader`);\n  }\n}\n\n/**\n * Resolves requests first from an in-memory map of file contents, and if a\n * file isn't found there, defers to another url loader.\n *\n * Useful for the editor use case. An editor will have a number of files in open\n * buffers at any time. For these files, the editor's in-memory buffer is\n * canonical, so that their contents are read even when they have unsaved\n * changes. For all other files, we can load the files using another loader,\n * e.g. from disk.\n *\n * TODO(rictic): make this a mixin that mixes another loader.\n */\nexport class InMemoryOverlayUrlLoader implements UrlLoader {\n  private readonly _fallbackLoader: UrlLoader;\n  urlContentsMap = new Map<string, string>();\n\n  constructor(fallbackLoader?: UrlLoader) {\n    this._fallbackLoader = fallbackLoader || new FailUrlLoader();\n    if (this._fallbackLoader.readDirectory) {\n      this.readDirectory =\n          this._fallbackLoader.readDirectory.bind(this._fallbackLoader);\n    }\n  }\n\n  canLoad(url: string): boolean {\n    return this.urlContentsMap.has(url) || this._fallbackLoader.canLoad(url);\n  }\n\n  async load(url: string): Promise<string> {\n    const contents = this.urlContentsMap.get(url);\n    if (typeof contents === 'string') {\n      return contents;\n    }\n    return this._fallbackLoader.load(url);\n  }\n\n  // We have this method if our underlying loader has it.\n  readDirectory?: (pathFromRoot: string, deep?: boolean) => Promise<string[]>;\n}\n"]}