{"version":3,"sources":["url-loader/fs-url-loader.ts"],"names":[],"mappings":"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","file":"fs-url-loader.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as fs from 'fs';\nimport * as pathlib from 'path';\nimport {Url} from 'url';\n\nimport {parseUrl} from '../core/utils';\n\nimport {UrlLoader} from './url-loader';\n\n\n\n/**\n * Resolves requests via the file system.\n */\nexport class FSUrlLoader implements UrlLoader {\n  root: string;\n\n  constructor(root?: string) {\n    this.root = root || '';\n  }\n\n  canLoad(url: string): boolean {\n    const urlObject = parseUrl(url);\n    const pathname =\n        pathlib.normalize(decodeURIComponent(urlObject.pathname || ''));\n    return this._isValid(urlObject, pathname);\n  }\n\n  private _isValid(urlObject: Url, pathname: string) {\n    return (urlObject.protocol === 'file' || !urlObject.hostname) &&\n        !pathname.startsWith('../');\n  }\n\n  load(url: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const filepath = this.getFilePath(url);\n      fs.readFile(filepath, 'utf8', (error: Error, contents: string) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(contents);\n        }\n      });\n    });\n  }\n\n  getFilePath(url: string): string {\n    const urlObject = parseUrl(url);\n    const pathname =\n        pathlib.normalize(decodeURIComponent(urlObject.pathname || ''));\n    if (!this._isValid(urlObject, pathname)) {\n      throw new Error(`Invalid URL ${url}`);\n    }\n    return this.root ? pathlib.join(this.root, pathname) : pathname;\n  }\n\n  async readDirectory(pathFromRoot: string, deep?: boolean): Promise<string[]> {\n    const files = await new Promise<string[]>((resolve, reject) => {\n      fs.readdir(\n          pathlib.join(this.root, pathFromRoot),\n          (err, files) => err ? reject(err) : resolve(files));\n    });\n    const results = [];\n    const subDirResultPromises = [];\n    for (const basename of files) {\n      const file = pathlib.join(pathFromRoot, basename);\n      const stat = await new Promise<fs.Stats>(\n          (resolve, reject) => fs.stat(\n              pathlib.join(this.root, file),\n              (err, stat) => err ? reject(err) : resolve(stat)));\n      if (stat.isDirectory()) {\n        if (deep) {\n          subDirResultPromises.push(this.readDirectory(file, deep));\n        }\n      } else {\n        results.push(file);\n      }\n    }\n    const arraysOfFiles = await Promise.all(subDirResultPromises);\n    for (const dirResults of arraysOfFiles) {\n      for (const file of dirResults) {\n        results.push(file);\n      }\n    }\n    return results;\n  }\n}\n"]}