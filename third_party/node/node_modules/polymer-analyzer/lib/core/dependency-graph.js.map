{"version":3,"sources":["core/dependency-graph.ts"],"names":[],"mappings":"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","file":"dependency-graph.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Deferred} from './utils';\n\nclass DocumentRecord {\n  url: string;\n  dependencies: Set<string>;\n  dependants: Set<string>;\n\n  // Represents the Promise that the dependencies are known, but nothing\n  // about their state (loaded, scanned, etc)\n  dependenciesDeferred: Deferred<Set<string>>;\n\n  static from(from: DocumentRecord) {\n    return new DocumentRecord(from);\n  }\n\n  constructor(urlOrFrom: string|DocumentRecord) {\n    if (typeof urlOrFrom === 'string') {\n      this.url = urlOrFrom;\n      this.dependencies = new Set();\n      this.dependants = new Set();\n      this.dependenciesDeferred = new Deferred<Set<string>>();\n    } else {\n      const from = urlOrFrom;\n      this.url = from.url;\n      this.dependencies = from.dependencies;\n      this.dependants = from.dependants;\n      this.dependenciesDeferred = new Deferred<Set<string>>();\n      if (from.dependenciesDeferred.resolved) {\n        this.dependenciesDeferred.resolve(this.dependencies);\n      } else if (from.dependenciesDeferred.rejected) {\n        this.dependenciesDeferred.reject(from.dependenciesDeferred.error);\n      }\n    }\n    this.dependenciesDeferred.promise.catch(\n        (_) => {\n            // no one listens for document rejections yet,\n        });\n  }\n\n  get dependenciesKnown(): Promise<Set<string>> {\n    return this.dependenciesDeferred.promise;\n  }\n\n  toString(): string {\n    let s = `${this.url}\\n`;\n    for (const dependency of this.dependencies) {\n      s += `  -> ${dependency}\\n`;\n    }\n    for (const dependant of this.dependants) {\n      s += `  <- ${dependant}\\n`;\n    }\n    return s;\n  }\n}\n\n/**\n * Maintains bidirectional indexes of the dependency graph, for quick querying.\n */\nexport class DependencyGraph {\n  private _documents = new Map<string, DocumentRecord>();\n\n  constructor(from?: DependencyGraph) {\n    if (!from)\n      return;\n\n    // Deep copy of `from`\n    for (const entry of from._documents.entries()) {\n      this._documents.set(entry[0], DocumentRecord.from(entry[1]));\n    }\n  }\n\n  private _getRecordFor(url: string) {\n    let record = this._documents.get(url);\n    if (record == null) {\n      record = new DocumentRecord(url);\n      this._documents.set(url, record);\n    }\n    return record;\n  }\n\n  /**\n   * Add dependencies of the given path.\n   *\n   * @param url The url of a document.\n   * @param newDependencies The paths of that document's direct dependencies.\n   */\n  addDocument(url: string, dependencies: Iterable<string>) {\n    const record = this._getRecordFor(url);\n    for (const dependency of dependencies) {\n      record.dependencies.add(dependency);\n      const dependencyRecord = this._getRecordFor(dependency);\n      dependencyRecord.dependants.add(url);\n    }\n    record.dependenciesDeferred.resolve(record.dependencies);\n  }\n\n  rejectDocument(url: string, error: Error) {\n    this._getRecordFor(url).dependenciesDeferred.reject(error);\n  }\n\n  /**\n   * Returns a Promise that resolves when the given document and all\n   * of its transitive dependencies have been resolved or rejected. This\n   * Promise never rejects, if the document or any dependencies are rejected,\n   * the Promise still resolves.\n   */\n  async whenReady(url: string): Promise<void> {\n    await this._whenReady(url, new Set<string>());\n  }\n\n  private async _whenReady(key: string, visited: Set<string>) {\n    if (visited.has(key)) {\n      return;\n    }\n    visited.add(key);\n    const dependenciesKnown = this._getRecordFor(key).dependenciesKnown;\n    const forgivingDependenciesKnown = dependenciesKnown.catch((_) => []);\n    const deps = await forgivingDependenciesKnown;\n    for (const dep of deps) {\n      await this._whenReady(dep, visited);\n    }\n  }\n\n  /**\n   * Returns a fork of this graph without the documents at the given paths.\n   */\n  invalidatePaths(paths: string[]): DependencyGraph {\n    const fork = new DependencyGraph(this);\n    for (const path of paths) {\n      const record = fork._documents.get(path);\n      if (!record) {\n        continue;\n      }\n      // Tell the dependencies that `path` is no longer one of their dependants.\n      for (const dependency of record.dependencies) {\n        const dependencyRecord = fork._documents.get(dependency);\n        if (dependencyRecord) {\n          dependencyRecord.dependants.delete(path);\n        }\n      }\n      fork._documents.delete(path);\n      // If there are dependents on this record, we must preserve them,\n      // as they're only added with an addDocument() call, and there are\n      // never repeated addDocument() calls for the same path.\n      if (record.dependants.size > 0) {\n        const newRecord = fork._getRecordFor(record.url);\n        for (const dependant of record.dependants) {\n          newRecord.dependants.add(dependant);\n        }\n      }\n    }\n    return fork;\n  }\n\n  /**\n   * Returns the set of transitive dependencies on the given path.\n   *\n   * So if A depends on B which depends on C, then getAllDependentsOf(C) will\n   * be Set([A,B]), and getAllDependantsOf(B) will be Set([A]).\n   */\n  getAllDependantsOf(path: string): Set<string> {\n    const result = new Set();\n    this._getAllDependantsOf(path, new Set(), result);\n    return result;\n  }\n\n  private _getAllDependantsOf(\n      path: string, visited: Set<string>, result: Set<string>): void {\n    if (visited.has(path)) {\n      return;\n    }\n    visited.add(path);\n    const record = this._documents.get(path);\n    if (!record) {\n      return;\n    }\n    const dependants = record.dependants;\n    for (const dependant of dependants) {\n      result.add(dependant);\n      this._getAllDependantsOf(dependant, visited, result);\n    }\n  }\n\n  toString() {\n    return Array.from(this._documents.values())\n        .map((dr) => dr.toString())\n        .join('\\n');\n  }\n}\n"]}