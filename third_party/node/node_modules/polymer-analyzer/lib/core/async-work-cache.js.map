{"version":3,"sources":["core/async-work-cache.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH;;GAEG;AACH;IAEE,YAAY,IAA2B;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;QACnC,CAAC;IACH,CAAC;IAED;;;;;;;;;OASG;IACG,YAAY,CAAC,GAAM,EAAE,OAAyB;;YAClD,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnD,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,YAAY,CAAC;YACtB,CAAC;YACD,MAAM,OAAO,GAAG,CAAC;gBACf,wEAAwE;gBACxE,8DAA8D;gBAC9D,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;gBACxB,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC,CAAA,CAAC,EAAE,CAAC;YACL,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC;KAAA;IAED,MAAM,CAAE,GAAM;QACZ,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;IAED,GAAG,CAAC,GAAM,EAAE,KAAQ;QAClB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,GAAG,CAAC,GAAM;QACR,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;CACF;AAlDD,wCAkDC","file":"async-work-cache.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * A map from keys to promises of values. Used for caching asynchronous work.\n */\nexport class AsyncWorkCache<K, V> {\n  private _keyToResultMap: Map<K, Promise<V>>;\n  constructor(from?: AsyncWorkCache<K, V>) {\n    if (from) {\n      this._keyToResultMap = new Map(from._keyToResultMap);\n    } else {\n      this._keyToResultMap = new Map();\n    }\n  }\n\n  /**\n   * If work has already begun to compute the given key, return a promise for\n   * the result of that work.\n   *\n   * If not, compute it with the given function.\n   *\n   * This method ensures that we will only try to compute the value for `key`\n   * once, no matter how often or with what timing getOrCompute is called, even\n   * recursively.\n   */\n  async getOrCompute(key: K, compute: () => Promise<V>) {\n    const cachedResult = this._keyToResultMap.get(key);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const promise = (async() => {\n      // Make sure we wait and return a Promise before doing any work, so that\n      // the Promise is cached before control flow enters compute().\n      await Promise.resolve();\n      return compute();\n    })();\n    this._keyToResultMap.set(key, promise);\n    return promise;\n  }\n\n  delete (key: K) {\n    this._keyToResultMap.delete(key);\n  }\n\n  clear() {\n    this._keyToResultMap.clear();\n  }\n\n  set(key: K, value: V) {\n    this._keyToResultMap.set(key, Promise.resolve(value));\n  }\n\n  has(key: K) {\n    return this._keyToResultMap.has(key);\n  }\n}\n"]}