{"version":3,"sources":["core/utils.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;GAYG;AACH,6BAA4C;AAE5C,MAAM,mBAAmB,GAAG,IAAI,CAAC;AAEjC,kBAAyB,GAAW;IAClC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,WAAS,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IACD,MAAM,SAAS,GAAG,WAAS,CAAC,GAAG,mBAAmB,GAAG,GAAG,EAAE,CAAC,CAAC;IAC5D,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC/B,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACpD,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC;AARD,4BAQC;AAED,kBAAyB,GAAW,EAAE,IAAY;IAChD,IAAI,QAAQ,GAAG,CAAC,CAAC;IACjB,OAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,CAAC;QAC9B,QAAQ,EAAE,CAAC;IACb,CAAC;IACD,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AACjC,CAAC;AAND,4BAMC;AAED;IAQE;QAJA,aAAQ,GAAG,KAAK,CAAC;QACjB,aAAQ,GAAG,KAAK,CAAC;QAIf,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACzC,IAAI,CAAC,OAAO,GAAG,CAAC,MAAS;gBACvB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAClB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBACtC,CAAC;gBACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAClB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBACtC,CAAC;gBACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,CAAC;YACF,IAAI,CAAC,MAAM,GAAG,CAAC,KAAY;gBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAClB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBACtC,CAAC;gBACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAClB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;gBACtC,CAAC;gBACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc;QACZ,MAAM,CAAC,CAAC,KAAU,EAAE,KAAQ;YAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACtB,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;CACF;AA3CD,4BA2CC","file":"utils.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {parse as parseUrl_, Url} from 'url';\n\nconst unspecifiedProtocol = '-:';\n\nexport function parseUrl(url: string): Url {\n  if (!url.startsWith('//')) {\n    return parseUrl_(url);\n  }\n  const urlObject = parseUrl_(`${unspecifiedProtocol}${url}`);\n  urlObject.protocol = undefined;\n  urlObject.href = urlObject.href!.replace(/^-:/, '');\n  return urlObject;\n}\n\nexport function trimLeft(str: string, char: string): string {\n  let leftEdge = 0;\n  while (str[leftEdge] === char) {\n    leftEdge++;\n  }\n  return str.substring(leftEdge);\n}\n\nexport class Deferred<T> {\n  promise: Promise<T>;\n  resolve: (result: T) => void;\n  reject: (error: Error) => void;\n  resolved = false;\n  rejected = false;\n  error: any;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (result: T) => {\n        if (this.resolved) {\n          throw new Error('Already resolved');\n        }\n        if (this.rejected) {\n          throw new Error('Already rejected');\n        }\n        this.resolved = true;\n        resolve(result);\n      };\n      this.reject = (error: Error) => {\n        if (this.resolved) {\n          throw new Error('Already resolved');\n        }\n        if (this.rejected) {\n          throw new Error('Already rejected');\n        }\n        this.rejected = true;\n        this.error = error;\n        reject(error);\n      };\n    });\n  }\n\n  toNodeCallback() {\n    return (error: any, value: T) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n    };\n  }\n}\n"]}