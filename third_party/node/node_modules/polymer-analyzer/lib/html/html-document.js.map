{"version":3,"sources":["html/html-document.ts"],"names":[],"mappings":"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","file":"html-document.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as clone from 'clone';\nimport * as dom5 from 'dom5';\nimport * as parse5 from 'parse5';\nimport {ASTNode} from 'parse5';\n\nimport {SourceRange} from '../model/model';\nimport {Options, ParsedDocument, StringifyOptions} from '../parser/document';\n\n/**\n * The ASTs of the HTML elements needed to represent Polymer elements.\n */\n\nexport interface HtmlVisitor { (node: ASTNode): void; }\n\nexport class ParsedHtmlDocument extends ParsedDocument<ASTNode, HtmlVisitor> {\n  type = 'html';\n\n  constructor(from: Options<ASTNode>) {\n    super(from);\n  }\n\n  visit(visitors: HtmlVisitor[]) {\n    dom5.nodeWalk(this.ast, (node) => {\n      visitors.forEach((visitor) => visitor(node));\n      return false;\n    });\n  }\n\n  forEachNode(callback: (node: ASTNode) => void) {\n    dom5.nodeWalk(this.ast, (node) => {\n      callback(node);\n      return false;\n    });\n  }\n\n  // An element node with end tag information will produce a source range that\n  // includes the closing tag.  It is assumed for offset calculation that the\n  // closing tag is always of the expected `</${tagName}>` form.\n  private _sourceRangeForElementWithEndTag(node: ASTNode): SourceRange\n      |undefined {\n    const location = node.__location;\n\n    if (isElementLocationInfo(location)) {\n      return {\n        file: this.url,\n        start: {\n          line: location.startTag.line - 1,\n          column: location.startTag.col - 1\n        },\n        end: {\n          line: location.endTag.line - 1,\n          column: location.endTag.col + (node.tagName || '').length + 2\n        }\n      };\n    }\n  }\n\n  // parse5 locations are 1 based but ours are 0 based.\n  protected _sourceRangeForNode(node: ASTNode): SourceRange|undefined {\n    const location = node.__location;\n    if (!node.__location) {\n      return;\n    }\n    if (isElementLocationInfo(location)) {\n      if (voidTagNames.has(node.tagName || '')) {\n        return this.sourceRangeForStartTag(node);\n      }\n      return this._sourceRangeForElementWithEndTag(node);\n    }\n\n    return this._getSourceRangeForLocation(location);\n  }\n\n  sourceRangeForAttribute(node: ASTNode, attrName: string): SourceRange\n      |undefined {\n    return this._getSourceRangeForLocation(\n        getAttributeLocation(node, attrName));\n  }\n  sourceRangeForAttributeName(node: ASTNode, attrName: string): SourceRange\n      |undefined {\n    const range = this.sourceRangeForAttribute(node, attrName);\n    if (!range) {\n      return;\n    }\n    // The attribute name can't have any spaces, newlines, or other funny\n    // business in it, so this is pretty simple.\n    return {\n      file: range.file,\n      start: range.start,\n      end: {\n        line: range.start.line,\n        column: range.start.column + attrName.length\n      }\n    };\n  }\n\n  sourceRangeForAttributeValue(\n      node: ASTNode, attrName: string, excludeQuotes?: boolean): SourceRange\n      |undefined {\n    const attributeRange = this.sourceRangeForAttribute(node, attrName);\n    if (!attributeRange) {\n      return;\n    }\n    // This is an attribute without a value.\n    if ((attributeRange.start.line === attributeRange.end.line) &&\n        (attributeRange.end.column - attributeRange.start.column ===\n         attrName.length)) {\n      return undefined;\n    }\n    const location = getAttributeLocation(node, attrName)!;\n    // This is complex because there may be whitespace around the = sign.\n    const fullAttribute =\n        this.contents.substring(location.startOffset, location.endOffset);\n    const equalsIndex = fullAttribute.indexOf('=');\n    if (equalsIndex === -1) {\n      // This is super weird and shouldn't happen, but it's probably better to\n      // just return the most reasonable thing we have here rather than\n      // throwing.\n      return undefined;\n    }\n    const whitespaceAfterEquals =\n        fullAttribute.substring(equalsIndex + 1).match(/[\\s\\n]*/)![0]!;\n    let endOfTextToSkip =\n        // the beginning of the attribute key value pair\n        location.startOffset +\n        // everything up to the equals sign\n        equalsIndex +\n        // plus one for the equals sign\n        1 +\n        // plus all the whitespace after the equals sign\n        whitespaceAfterEquals.length;\n\n    if (excludeQuotes) {\n      const maybeQuote = this.contents.charAt(endOfTextToSkip);\n      if (maybeQuote === '\\'' || maybeQuote === '\"') {\n        endOfTextToSkip += 1;\n      }\n    }\n\n    return this.offsetsToSourceRange(endOfTextToSkip, location.endOffset);\n  }\n\n  sourceRangeForStartTag(node: ASTNode): SourceRange|undefined {\n    return this._getSourceRangeForLocation(getStartTagLocation(node));\n  }\n\n  sourceRangeForEndTag(node: ASTNode): SourceRange|undefined {\n    return this._getSourceRangeForLocation(getEndTagLocation(node));\n  }\n\n  private _getSourceRangeForLocation(location: parse5.LocationInfo|\n                                     undefined): SourceRange|undefined {\n    if (!location) {\n      return;\n    }\n    return this.offsetsToSourceRange(location.startOffset, location.endOffset);\n  }\n\n  stringify(options?: StringifyOptions) {\n    options = options || {};\n    /**\n     * We want to mutate this.ast with the results of stringifying our inline\n     * documents. This will mutate this.ast even if no one else has mutated it\n     * yet, because our inline documents' stringifiers may not perfectly\n     * reproduce their input. However, we don't want to mutate any analyzer\n     * object after they've been produced and cached, ParsedHtmlDocuments\n     * included. So we want to clone first.\n     *\n     * Because our inline documents contain references into this.ast, we need to\n     * make of copy of `this` and the inline documents such the\n     * inlineDoc.astNode references into this.ast are maintained. Fortunately,\n     * clone() does this! So we'll clone them all together in a single call by\n     * putting them all into an array.\n     */\n    const immutableDocuments = options.inlineDocuments || [];\n    immutableDocuments.unshift(this);\n\n    // We can modify these, as they don't escape this method.\n    const mutableDocuments = clone(immutableDocuments);\n    const selfClone = mutableDocuments.shift()!;\n\n    for (const doc of mutableDocuments) {\n      // TODO(rictic): infer this from doc.astNode's indentation.\n      const expectedIndentation = 2;\n\n      dom5.setTextContent(doc.astNode, '\\n' + doc.stringify({\n        indent: expectedIndentation\n      }) + '  '.repeat(expectedIndentation - 1));\n    }\n\n    removeFakeNodes(selfClone.ast);\n    return parse5.serialize(selfClone.ast);\n  }\n}\n\nconst injectedTagNames = new Set(['html', 'head', 'body']);\nfunction removeFakeNodes(ast: dom5.Node) {\n  const children = (ast.childNodes || []).slice();\n  if (ast.parentNode && !ast.__location && injectedTagNames.has(ast.nodeName)) {\n    for (const child of children) {\n      dom5.insertBefore(ast.parentNode, ast, child);\n    }\n    dom5.remove(ast);\n  }\n  for (const child of children) {\n    removeFakeNodes(child);\n  }\n}\n\nfunction isElementLocationInfo(location: parse5.LocationInfo|\n                               parse5.ElementLocationInfo):\n    location is parse5.ElementLocationInfo {\n  const loc = location as Partial<parse5.ElementLocationInfo>;\n  return (loc.startTag && loc.endTag) != null;\n}\n\nfunction getStartTagLocation(node: parse5.ASTNode): parse5.LocationInfo|\n    undefined {\n  if (voidTagNames.has(node.tagName || '')) {\n    return node.__location as parse5.LocationInfo;\n  }\n  if ('startTag' in node.__location) {\n    return (node.__location as parse5.ElementLocationInfo).startTag;\n  }\n  // Sometimes parse5 throws an attrs attribute on a location info that seems\n  // to correspond to an unclosed tag with attributes but no children.\n  // In that case, the node's location corresponds to the start tag. In other\n  // cases though, node.__location will include children.\n  if ('attrs' in node.__location) {\n    return node.__location as parse5.LocationInfo;\n  }\n}\n\nfunction getEndTagLocation(node: parse5.ASTNode): parse5.LocationInfo|\n    undefined {\n  if ('endTag' in node.__location) {\n    return (node.__location as parse5.ElementLocationInfo).endTag;\n  }\n}\n\nfunction getAttributeLocation(\n    node: parse5.ASTNode, attrName: string): parse5.LocationInfo|undefined {\n  if (!node || !node.__location) {\n    return;\n  }\n  let attrs: parse5.AttributesLocationInfo|undefined = undefined;\n  const location = node.__location;\n  const elemLocation = location as Partial<parse5.ElementLocationInfo>;\n  const elemStartLocation = location as Partial<parse5.StartTagLocationInfo>;\n  if (elemLocation.startTag !== undefined && elemLocation.startTag.attrs) {\n    attrs = elemLocation.startTag.attrs;\n  } else if (elemStartLocation.attrs !== undefined) {\n    attrs = elemStartLocation.attrs;\n  }\n  if (!attrs) {\n    return;\n  }\n  return attrs[attrName];\n}\n\n/**\n * HTML5 treats these tags as *always* self-closing. This is relevant for\n * getting start tag information.\n *\n * Source: https://www.w3.org/TR/html5/syntax.html#void-elements\n */\nconst voidTagNames = new Set([\n  'area',\n  'base',\n  'br',\n  'col',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]);\n"]}