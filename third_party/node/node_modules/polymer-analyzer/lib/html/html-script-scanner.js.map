{"version":3,"sources":["html/html-script-scanner.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,6BAA6B;AAC7B,6BAA0C;AAE1C,0CAAmI;AAInI,uDAAyD;AAEzD,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;AAE1B,MAAM,cAAc,GAAG,CAAC,CAAC,GAAG,CACxB,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,EACtB,CAAC,CAAC,EAAE,CACA,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EACxB,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,iBAAiB,CAAC,EACzC,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,wBAAwB,CAAC,EAChD,CAAC,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;AAE3C;IACQ,IAAI,CACN,QAA4B,EAC5B,KAA8C;;YAChD,MAAM,QAAQ,GAA4C,EAAE,CAAC;YAE7D,MAAM,SAAS,GAAgB,CAAC,IAAI;gBAClC,EAAE,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACzB,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;oBAC3C,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACR,MAAM,SAAS,GAAG,aAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;wBACpD,QAAQ,CAAC,IAAI,CAAC,IAAI,wCAAsB,CACpC,aAAa,EACb,SAAS,EACT,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAE,EAClC,QAAQ,CAAC,4BAA4B,CAAC,IAAI,EAAE,KAAK,CAAE,EACnD,IAAI,EACJ,KAAK,CAAC,CAAC,CAAC;oBACd,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,cAAc,GAAG,6CAAqC,CAAC,IAAI,CAAC,CAAC;wBACnE,MAAM,mBAAmB,GAAG,8BAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;wBAC/D,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;wBAE3C,QAAQ,CAAC,IAAI,CAAC,IAAI,6BAAqB,CACnC,IAAI,EACJ,QAAQ,EACR,cAAc,EACd,mBAAmB,EACnB,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAE,EAClC,IAAI,CAAC,CAAC,CAAC;oBACb,CAAC;gBACH,CAAC;YACH,CAAC,CAAC;YAEF,MAAM,KAAK,CAAC,SAAS,CAAC,CAAC;YAEvB,MAAM,CAAC,EAAC,QAAQ,EAAC,CAAC;QACpB,CAAC;KAAA;CACF;AAtCD,8CAsCC","file":"html-script-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as dom5 from 'dom5';\nimport {resolve as resolveUrl} from 'url';\n\nimport {getAttachedCommentText, getLocationOffsetOfStartOfTextContent, ScannedImport, ScannedInlineDocument} from '../model/model';\n\nimport {HtmlVisitor, ParsedHtmlDocument} from './html-document';\nimport {HtmlScanner} from './html-scanner';\nimport {ScannedScriptTagImport} from './html-script-tag';\n\nconst p = dom5.predicates;\n\nconst isJsScriptNode = p.AND(\n    p.hasTagName('script'),\n    p.OR(\n        p.NOT(p.hasAttr('type')),\n        p.hasAttrValue('type', 'text/javascript'),\n        p.hasAttrValue('type', 'application/javascript'),\n        p.hasAttrValue('type', 'module')));\n\nexport class HtmlScriptScanner implements HtmlScanner {\n  async scan(\n      document: ParsedHtmlDocument,\n      visit: (visitor: HtmlVisitor) => Promise<void>) {\n    const features: (ScannedImport|ScannedInlineDocument)[] = [];\n\n    const myVisitor: HtmlVisitor = (node) => {\n      if (isJsScriptNode(node)) {\n        const src = dom5.getAttribute(node, 'src');\n        if (src) {\n          const importUrl = resolveUrl(document.baseUrl, src);\n          features.push(new ScannedScriptTagImport(\n              'html-script',\n              importUrl,\n              document.sourceRangeForNode(node)!,\n              document.sourceRangeForAttributeValue(node, 'src')!,\n              node,\n              false));\n        } else {\n          const locationOffset = getLocationOffsetOfStartOfTextContent(node);\n          const attachedCommentText = getAttachedCommentText(node) || '';\n          const contents = dom5.getTextContent(node);\n\n          features.push(new ScannedInlineDocument(\n              'js',\n              contents,\n              locationOffset,\n              attachedCommentText,\n              document.sourceRangeForNode(node)!,\n              node));\n        }\n      }\n    };\n\n    await visit(myVisitor);\n\n    return {features};\n  }\n}\n"]}