{"version":3,"sources":["html/html-script-tag.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,0CAAkF;AAElF;;;;;GAKG;AACH,qBAA6B,SAAQ,cAAM;CAAyB;AAApE,0CAAoE;AAEpE,4BAAoC,SAAQ,qBAAa;IACvD,OAAO,CAAC,QAAkB;QACxB,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC;QACT,CAAC;QAED,yEAAyE;QACzE,wBAAwB;QAExB,4EAA4E;QAC5E,qEAAqE;QACrE,2CAA2C;QAC3C,qEAAqE;QACrE,0EAA0E;QAC1E,wDAAwD;QACxD,EAAE;QACF,6DAA6D;QAE7D,MAAM,eAAe,GACjB,QAAQ,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACpB,MAAM,gBAAgB,GAClB,IAAI,gBAAQ,CAAC,eAAe,EAAE,QAAQ,CAAC,gBAAgB,CAAC,CAAC;YAC7D,gBAAgB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YACvC,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAE3B,MAAM,CAAC,IAAI,eAAe,CACtB,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,IAAI,EACT,gBAAgB,EAChB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,QAAQ,EACb,KAAK,CAAC,CAAC;QACb,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,4BAA4B;YAC5B,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;YACrE,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,eAAO,CAAC;gBACjC,IAAI,EAAE,gBAAgB;gBACtB,OAAO,EAAE,0BAA0B,KAAK,EAAE;gBAC1C,WAAW,EAAE,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,CAAE;gBACvD,QAAQ,EAAE,gBAAQ,CAAC,KAAK;gBACxB,cAAc,EAAE,QAAQ,CAAC,cAAc;aACxC,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;IACH,CAAC;CACF;AAhDD,wDAgDC","file":"html-script-tag.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Document, Import, ScannedImport, Severity, Warning} from '../model/model';\n\n/**\n * <script> tags are represented in two different ways: as inline documents,\n * or as imports, dependeng on whether the tag has a `src` attribute. This class\n * represents a script tag with a `src` attribute as an import, so that the\n * analyzer loads and parses the referenced document.\n */\nexport class ScriptTagImport extends Import { type: 'html-script'; }\n\nexport class ScannedScriptTagImport extends ScannedImport {\n  resolve(document: Document): ScriptTagImport|undefined {\n    if (!document._analysisContext.canResolveUrl(this.url)) {\n      return;\n    }\n\n    // TODO(justinfagnani): warn if the same URL is loaded from more than one\n    // non-module script tag\n\n    // TODO(justinfagnani): Use the analyzer cache, since this is duplicating an\n    // analysis of the external script, but the document the analyzer has\n    // doesn't have its container as a feature.\n    // A better design might be to have the import itself be in charge of\n    // producing document objects. This will fit better with JS modules, where\n    // the type attribute drives how the document is parsed.\n    //\n    // See https://github.com/Polymer/polymer-analyzer/issues/615\n\n    const scannedDocument =\n        document._analysisContext._getScannedDocument(this.url);\n    if (scannedDocument) {\n      const importedDocument =\n          new Document(scannedDocument, document._analysisContext);\n      importedDocument._addFeature(document);\n      importedDocument.resolve();\n\n      return new ScriptTagImport(\n          this.url,\n          this.type,\n          importedDocument,\n          this.sourceRange,\n          this.urlSourceRange,\n          this.astNode,\n          this.warnings,\n          false);\n    } else {\n      // not found or syntax error\n      const error = (this.error ? (this.error.message || this.error) : '');\n      document.warnings.push(new Warning({\n        code: 'could-not-load',\n        message: `Unable to load import: ${error}`,\n        sourceRange: (this.urlSourceRange || this.sourceRange)!,\n        severity: Severity.ERROR,\n        parsedDocument: document.parsedDocument\n      }));\n      return undefined;\n    }\n  }\n}\n"]}